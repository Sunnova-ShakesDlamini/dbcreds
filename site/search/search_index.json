{"config":{"lang":["en"],"separator":"[\\s\\-\\_\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to dbcredsdbcreds","text":"<p>Professional Database Credentials Management</p> <p>\u26a1 Lightning-Fast Imports!</p>        Get Started \u2192             View API Docs      \ud83c\udf89 New in v2.0: Intelligent lazy loading for instant imports in Jupyter &amp; marimo notebooks!    Learn more \u2192"},{"location":"#lightning-fast-access","title":"\ud83d\ude80 Lightning-Fast Access","text":"\u26a1 Instant Imports <p>Automatic marimo detection and lazy loading means imports take milliseconds, not seconds.</p> <pre><code># In marimo - automatically fast!\nfrom dbcreds import get_connection_string\nconn = get_connection_string(\"prod\")  # ~50ms!</code></pre> \ud83c\udfaf Smart Detection <p>Detects notebook environments and optimizes automatically. No configuration needed!</p> <pre><code># Force fast mode anywhere\nexport DBCREDS_FAST_MODE=true\npython your_script.py</code></pre>"},{"location":"#quick-start","title":"\u26a1 Quick Start","text":"<pre><code># Install\npip install dbcreds\n\n# Add environment\ndbcreds add prod --type postgresql\n\n# Set credentials (stored securely) \ndbcreds set prod --host db.company.com --port 5432 --database myapp --username dbuser\n\n# Use in Python - Lightning fast!\nfrom dbcreds import get_connection_string\nconn_string = get_connection_string(\"prod\")\n</code></pre>"},{"location":"#security-first","title":"\ud83d\udd10 Security First","text":"\ud83d\udee1\ufe0f System Keychains <p>Uses Windows Credential Manager, macOS Keychain, or Linux Secret Service. Your credentials are encrypted by the OS.</p> \ud83d\udd11 Zero Plain Text <p>Credentials never touch disk unencrypted. No .env files, no config files with passwords.</p> \ud83d\udd04 Rotation Tracking <p>Built-in password expiry tracking. Get notified before passwords expire.</p>"},{"location":"#core-features","title":"\ud83c\udfaf Core Features","text":"\ud83c\udf0d Multi-Environment <p>Manage dev, staging, and production credentials separately</p> \ud83d\ude80 Beautiful CLI <p>Rich terminal UI with colors, progress bars, and tables</p> \ud83c\udf10 Web Interface <p>FastAPI + HTMX for team credential management</p> \ud83d\udcca All Databases <p>PostgreSQL, MySQL, Oracle, SQL Server, and more</p> \ud83d\udc0d Python Native <p>Works with SQLAlchemy, pandas, asyncio, and more</p> \ud83d\udcdd Type Safe <p>Full type hints with Pydantic validation</p>"},{"location":"#installation","title":"\ud83d\udce6 Installation","text":"pipuvpipx (CLI only) <pre><code># Basic installation\npip install dbcreds\n\n# With specific database drivers\npip install \"dbcreds[postgresql,mysql]\"\n</code></pre> <pre><code># Fast installation with uv\nuv add dbcreds\n\n# With extras\nuv add \"dbcreds[postgresql,mysql]\"\n</code></pre> <pre><code># Install CLI globally\npipx install dbcreds\n</code></pre>"},{"location":"#why-dbcreds","title":"\ud83d\udca1 Why dbcreds?","text":"\ud83d\udd12 Stop Hardcoding <p>No more passwords in code, .env files, or notebooks.</p> \ud83d\udc65 Built for Teams <p>Share access without sharing passwords.</p> \u26a1 Blazing Fast <p>Lazy loading means instant imports.</p>"},{"location":"#see-it-in-action","title":"\ud83d\ude80 See It In Action","text":"Basic UsageWith SQLAlchemyIn Notebooks <pre><code>from dbcreds import get_connection_string\n\n# Get connection - it's that simple!\nconn = get_connection_string(\"prod\")\n\n# Use with pandas\nimport pandas as pd\ndf = pd.read_sql(\"SELECT * FROM users\", conn)\n</code></pre> <pre><code>from dbcreds import get_engine\n\n# Get a configured SQLAlchemy engine\nengine = get_engine(\"analytics\")\n\n# Use it normally\nwith engine.connect() as conn:\n    result = conn.execute(\"SELECT COUNT(*) FROM events\")\n    print(f\"Total events: {result.scalar()}\")\n</code></pre> <pre><code># Automatic fast mode in marimo/Jupyter!\nfrom dbcreds import get_connection_string\nimport pandas as pd\n\n# Lightning fast connection\ndf = pd.read_sql(\n    \"SELECT * FROM daily_metrics\", \n    get_connection_string(\"analytics\")\n)\n</code></pre>"},{"location":"#learn-more","title":"\ud83d\udcda Learn More","text":"\ud83d\ude80 Quickstart <p>Get up and running in 5 minutes</p> \u26a1 Performance <p>Learn about lazy loading &amp; fast mode</p> \ud83d\udda5\ufe0f CLI Reference <p>Complete command documentation</p> \ud83d\udcd3 Notebook Examples <p>Using dbcreds in marimo &amp; Jupyter</p> <p>Made with \ud83d\udc9a by</p>      Sunnova ShakesDlamini    GitHub PyPI Issues"},{"location":"api/backends/","title":"Backends API","text":""},{"location":"api/backends/#base-backend","title":"Base Backend","text":""},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend","title":"<code>dbcreds.backends.base.CredentialBackend</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for credential storage backends.</p> <p>All credential backends must inherit from this class and implement the required methods.</p>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>  <code>abstractmethod</code>","text":"<p>Delete a credential from storage.</p> <p>Args:     key: Unique identifier for the credential</p> <p>Returns:     True if successful, False otherwise</p> <p>Examples:     &gt;&gt;&gt; backend.delete_credential(\"dbcreds:dev\")</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef delete_credential(self, key: str) -&gt; bool:\n    \"\"\"\n    Delete a credential from storage.\n\n    Args:\n        key: Unique identifier for the credential\n\n    Returns:\n        True if successful, False otherwise\n\n    Examples:\n        &gt;&gt;&gt; backend.delete_credential(\"dbcreds:dev\")\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>  <code>abstractmethod</code>","text":"<p>Retrieve a credential from storage.</p> <p>Args:     key: Unique identifier for the credential</p> <p>Returns:     Tuple of (username, password, metadata) if found, None otherwise</p> <p>Examples:     &gt;&gt;&gt; result = backend.get_credential(\"dbcreds:dev\")     &gt;&gt;&gt; if result:     ...     username, password, metadata = result</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef get_credential(self, key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]:\n    \"\"\"\n    Retrieve a credential from storage.\n\n    Args:\n        key: Unique identifier for the credential\n\n    Returns:\n        Tuple of (username, password, metadata) if found, None otherwise\n\n    Examples:\n        &gt;&gt;&gt; result = backend.get_credential(\"dbcreds:dev\")\n        &gt;&gt;&gt; if result:\n        ...     username, password, metadata = result\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.is_available","title":"<code>is_available() -&gt; bool</code>  <code>abstractmethod</code>","text":"<p>Check if this backend is available on the current system.</p> <p>Returns:     True if the backend can be used, False otherwise</p> <p>Examples:     &gt;&gt;&gt; backend = KeyringBackend()     &gt;&gt;&gt; if backend.is_available():     ...     print(\"Keyring is available\")</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef is_available(self) -&gt; bool:\n    \"\"\"\n    Check if this backend is available on the current system.\n\n    Returns:\n        True if the backend can be used, False otherwise\n\n    Examples:\n        &gt;&gt;&gt; backend = KeyringBackend()\n        &gt;&gt;&gt; if backend.is_available():\n        ...     print(\"Keyring is available\")\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.list_credentials","title":"<code>list_credentials() -&gt; list[str]</code>","text":"<p>List all credential keys managed by this backend.</p> <p>Returns:     List of credential keys</p> <p>Note:     This is optional and may not be implemented by all backends.</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>def list_credentials(self) -&gt; list[str]:\n    \"\"\"\n    List all credential keys managed by this backend.\n\n    Returns:\n        List of credential keys\n\n    Note:\n        This is optional and may not be implemented by all backends.\n    \"\"\"\n    return []\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>  <code>abstractmethod</code>","text":"<p>Store a credential.</p> <p>Args:     key: Unique identifier for the credential     username: Username to store     password: Password to store     metadata: Additional metadata to store</p> <p>Returns:     True if successful, False otherwise</p> <p>Examples:     &gt;&gt;&gt; success = backend.set_credential(     ...     \"dbcreds:dev\",     ...     \"myuser\",     ...     \"mypass\",     ...     {\"host\": \"localhost\", \"port\": 5432}     ... )</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef set_credential(self, key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool:\n    \"\"\"\n    Store a credential.\n\n    Args:\n        key: Unique identifier for the credential\n        username: Username to store\n        password: Password to store\n        metadata: Additional metadata to store\n\n    Returns:\n        True if successful, False otherwise\n\n    Examples:\n        &gt;&gt;&gt; success = backend.set_credential(\n        ...     \"dbcreds:dev\",\n        ...     \"myuser\",\n        ...     \"mypass\",\n        ...     {\"host\": \"localhost\", \"port\": 5432}\n        ... )\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#keyring-backend","title":"Keyring Backend","text":""},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend","title":"<code>dbcreds.backends.keyring.KeyringBackend</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Keyring-based credential storage backend.</p> <p>Uses the python-keyring library to store credentials in the system's native credential store.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential from keyring.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential from keyring.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Check if keyring is available and functional.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.list_credentials","title":"<code>list_credentials() -&gt; list[str]</code>","text":"<p>List all dbcreds keys in keyring.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Store credential in keyring.</p>"},{"location":"api/backends/#windows-backend","title":"Windows Backend","text":""},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend","title":"<code>dbcreds.backends.windows.WindowsCredentialBackend()</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Windows Credential Manager backend.</p> <p>Uses the Windows API to securely store credentials in the Windows Credential Manager.</p> <p>Initialize Windows API functions.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential from Windows Credential Manager.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential from Windows Credential Manager.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Check if Windows Credential Manager is available.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Store credential in Windows Credential Manager.</p>"},{"location":"api/backends/#environment-backend","title":"Environment Backend","text":""},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend","title":"<code>dbcreds.backends.environment.EnvironmentBackend</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Environment variable credential backend.</p> <p>Reads credentials from environment variables using a naming convention. Variables should be named as: DBCREDS_{ENV}_{FIELD}</p> <p>Example:     DBCREDS_DEV_HOST=localhost     DBCREDS_DEV_PORT=5432     DBCREDS_DEV_USERNAME=myuser     DBCREDS_DEV_PASSWORD=mypass</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential from environment variables.</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential from environment variables.</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Environment variables are always available.</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Set credential in environment variables.</p> <p>Note: This only affects the current process and its children.</p>"},{"location":"api/backends/#config-backend","title":"Config Backend","text":""},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend","title":"<code>dbcreds.backends.config.ConfigFileBackend(config_dir: Optional[str] = None)</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Configuration file backend.</p> <p>Stores environment configurations and non-sensitive metadata in JSON files. This backend should not be used for storing passwords directly.</p> <p>Initialize the config file backend.</p> <p>Args:     config_dir: Directory to store configuration files</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential metadata from config file.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential metadata from config file.</p> <p>Note: This backend does not store passwords.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Check if we can write to the config directory.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.load_environments","title":"<code>load_environments() -&gt; List[Dict[str, Any]]</code>","text":"<p>Load environment configurations.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.save_environments","title":"<code>save_environments(environments: List[Dict[str, Any]]) -&gt; bool</code>","text":"<p>Save environment configurations.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Store credential metadata in config file.</p> <p>Note: Password is not stored, only metadata.</p>"},{"location":"api/cli/","title":"CLI API","text":""},{"location":"api/cli/#main-cli-application","title":"Main CLI Application","text":""},{"location":"api/cli/#dbcreds.cli.app","title":"<code>dbcreds.cli.app = typer.Typer(name='dbcreds', help='Professional database credentials management', add_completion=True, rich_markup_mode='rich')</code>  <code>module-attribute</code>","text":""},{"location":"api/cli/#commands","title":"Commands","text":""},{"location":"api/cli/#dbcreds.cli.init","title":"<code>dbcreds.cli.init()</code>","text":"<p>Initialize dbcreds configuration.</p>"},{"location":"api/cli/#dbcreds.cli.add","title":"<code>dbcreds.cli.add(name: str = typer.Argument(..., help='Environment name (e.g., dev, staging, prod)'), db_type: DatabaseType = typer.Option(DatabaseType.POSTGRESQL, '--type', '-t', help='Database type', case_sensitive=False), host: Optional[str] = typer.Option(None, '--host', '-h', help='Database host'), port: Optional[int] = typer.Option(None, '--port', '-p', help='Database port'), database: Optional[str] = typer.Option(None, '--database', '-d', help='Database name'), username: Optional[str] = typer.Option(None, '--username', '-u', help='Database username'), description: Optional[str] = typer.Option(None, '--description', help='Environment description'), production: bool = typer.Option(False, '--production', help='Mark as production environment'), expires_days: int = typer.Option(90, '--expires-days', help='Password expiry in days'))</code>","text":"<p>Add a new database environment.</p>"},{"location":"api/cli/#dbcreds.cli.list","title":"<code>dbcreds.cli.list()</code>","text":"<p>List all configured environments.</p>"},{"location":"api/cli/#dbcreds.cli.show","title":"<code>dbcreds.cli.show(name: str = typer.Argument(..., help='Environment name'), show_password: bool = typer.Option(False, '--password', help='Show password'))</code>","text":"<p>Show details for a specific environment.</p>"},{"location":"api/cli/#dbcreds.cli.test","title":"<code>dbcreds.cli.test(name: str = typer.Argument(..., help='Environment name'))</code>","text":"<p>Test database connection for an environment.</p>"},{"location":"api/cli/#dbcreds.cli.remove","title":"<code>dbcreds.cli.remove(name: str = typer.Argument(..., help='Environment name'), force: bool = typer.Option(False, '--force', '-f', help='Skip confirmation'))</code>","text":"<p>Remove an environment and its credentials.</p>"},{"location":"api/cli/#dbcreds.cli.update","title":"<code>dbcreds.cli.update(name: str = typer.Argument(..., help='Environment name'), password: bool = typer.Option(False, '--password', help='Update password only'), expires_days: Optional[int] = typer.Option(None, '--expires-days', help='Update password expiry'))</code>","text":"<p>Update credentials for an environment.</p>"},{"location":"api/cli/#dbcreds.cli.check","title":"<code>dbcreds.cli.check()</code>","text":"<p>Check for expiring or expired passwords.</p>"},{"location":"api/cli/#dbcreds.cli.export","title":"<code>dbcreds.cli.export(name: str = typer.Argument(..., help='Environment name'), format: str = typer.Option('uri', '--format', '-f', help='Export format (uri, env, json)'), include_password: bool = typer.Option(True, '--include-password', help='Include password'))</code>","text":"<p>Export connection details for an environment.</p>"},{"location":"api/core/","title":"Core API","text":""},{"location":"api/core/#credentialmanager","title":"CredentialManager","text":""},{"location":"api/core/#dbcreds.core.manager.CredentialManager","title":"<code>dbcreds.core.manager.CredentialManager(config_dir: Optional[str] = None)</code>","text":"<p>Main credential management class with lazy initialization.</p> <p>Orchestrates credential storage and retrieval across multiple backends, manages environments, and handles password expiration.</p> <p>Attributes:     config_dir: Directory for configuration files     backends: List of available credential backends     environments: Dictionary of configured environments</p> <p>Examples:     &gt;&gt;&gt; manager = CredentialManager()     &gt;&gt;&gt; manager.add_environment(\"dev\", DatabaseType.POSTGRESQL)     &gt;&gt;&gt; manager.set_credentials(\"dev\", \"localhost\", 5432, \"mydb\", \"user\", \"pass\")     &gt;&gt;&gt; creds = manager.get_credentials(\"dev\")</p> <p>Initialize the credential manager with lazy loading.</p> <p>Args:     config_dir: Optional custom configuration directory. Defaults to ~/.dbcreds</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager-functions","title":"Functions","text":""},{"location":"api/core/#dbcreds.core.manager.CredentialManager.__new__","title":"<code>__new__(config_dir: Optional[str] = None)</code>","text":"<p>Singleton pattern with lazy initialization.</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.add_environment","title":"<code>add_environment(name: str, database_type, description: Optional[str] = None, is_production: bool = False)</code>","text":"<p>Add a new environment configuration.</p> <p>Args:     name: Environment name (e.g., 'dev', 'prod')     database_type: Type of database     description: Optional description     is_production: Whether this is a production environment</p> <p>Returns:     Created Environment object</p> <p>Raises:     CredentialError: If environment already exists</p> <p>Examples:     &gt;&gt;&gt; manager.add_environment(\"dev\", DatabaseType.POSTGRESQL, \"Development database\")</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.get_credentials","title":"<code>get_credentials(environment: str, check_expiry: bool = True)</code>","text":"<p>Retrieve credentials for an environment.</p> <p>Args:     environment: Environment name     check_expiry: Whether to check for password expiration</p> <p>Returns:     DatabaseCredentials object</p> <p>Raises:     CredentialNotFoundError: If credentials not found     PasswordExpiredError: If password has expired</p> <p>Examples:     &gt;&gt;&gt; creds = manager.get_credentials(\"dev\")     &gt;&gt;&gt; print(creds.host, creds.port)</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.list_environments","title":"<code>list_environments()</code>","text":"<p>List all configured environments.</p> <p>Returns:     List of Environment objects</p> <p>Examples:     &gt;&gt;&gt; envs = manager.list_environments()     &gt;&gt;&gt; for env in envs:     ...     print(env.name, env.database_type)</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.remove_environment","title":"<code>remove_environment(name: str) -&gt; None</code>","text":"<p>Remove an environment and its credentials.</p> <p>Args:     name: Environment name to remove</p> <p>Raises:     CredentialNotFoundError: If environment doesn't exist</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.set_credentials","title":"<code>set_credentials(environment: str, host: str, port: int, database: str, username: str, password: str, password_expires_days: Optional[int] = 90, **options)</code>","text":"<p>Store credentials for an environment.</p> <p>Args:     environment: Environment name     host: Database host     port: Database port     database: Database name     username: Database username     password: Database password     password_expires_days: Days until password expires (None for no expiry)     **options: Additional connection options</p> <p>Returns:     Created DatabaseCredentials object</p> <p>Raises:     CredentialNotFoundError: If environment doesn't exist</p> <p>Examples:     &gt;&gt;&gt; manager.set_credentials(\"dev\", \"localhost\", 5432, \"mydb\", \"user\", \"pass\")</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.test_connection","title":"<code>test_connection(environment: str) -&gt; bool</code>","text":"<p>Test database connection for an environment.</p> <p>Args:     environment: Environment name</p> <p>Returns:     True if connection successful, False otherwise</p> <p>Examples:     &gt;&gt;&gt; if manager.test_connection(\"dev\"):     ...     print(\"Connection successful!\")</p>"},{"location":"api/core/#models","title":"Models","text":""},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials","title":"<code>dbcreds.core.models.DatabaseCredentials</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Database connection credentials.</p> <p>Secure storage model for database connection information.</p> <p>Attributes:     environment: Environment name     host: Database server hostname or IP     port: Database server port     database: Database name     username: Database username     password: Database password (stored securely)     options: Additional connection options     ssl_mode: SSL connection mode     password_updated_at: When the password was last updated     password_expires_at: When the password expires</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials-functions","title":"Functions","text":""},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.days_until_expiry","title":"<code>days_until_expiry() -&gt; Optional[int]</code>","text":"<p>Get the number of days until password expiry.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.ensure_timezone_aware","title":"<code>ensure_timezone_aware(v)</code>  <code>classmethod</code>","text":"<p>Ensure datetime fields are timezone-aware.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.get_connection_string","title":"<code>get_connection_string(include_password: bool = True, driver: Optional[str] = None) -&gt; str</code>","text":"<p>Generate a connection string for the database.</p> <p>Args:     include_password: Whether to include the password in the connection string     driver: Optional driver override for the connection string</p> <p>Returns:     Database connection URI</p> <p>Examples:     &gt;&gt;&gt; creds.get_connection_string()     'postgresql://user:pass@localhost:5432/mydb'     &gt;&gt;&gt; creds.get_connection_string(include_password=False)     'postgresql://user@localhost:5432/mydb'</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.is_password_expired","title":"<code>is_password_expired() -&gt; bool</code>","text":"<p>Check if the password has expired.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.validate_port","title":"<code>validate_port(v: int, info) -&gt; int</code>  <code>classmethod</code>","text":"<p>Set default port based on database type if not specified.</p>"},{"location":"api/core/#dbcreds.core.models.Environment","title":"<code>dbcreds.core.models.Environment</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Database environment configuration.</p> <p>Represents a named database environment (e.g., dev, staging, prod) with its associated settings.</p> <p>Attributes:     name: Environment name (e.g., 'dev', 'prod')     database_type: Type of database     description: Optional description of the environment     is_production: Whether this is a production environment     created_at: When the environment was created     updated_at: When the environment was last updated</p>"},{"location":"api/core/#dbcreds.core.models.Environment-functions","title":"Functions","text":""},{"location":"api/core/#dbcreds.core.models.Environment.ensure_timezone_aware","title":"<code>ensure_timezone_aware(v)</code>  <code>classmethod</code>","text":"<p>Ensure datetime fields are timezone-aware.</p>"},{"location":"api/core/#dbcreds.core.models.Environment.validate_name","title":"<code>validate_name(v: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Validate environment name.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseType","title":"<code>dbcreds.core.models.DatabaseType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Supported database types.</p>"},{"location":"api/core/#exceptions","title":"Exceptions","text":""},{"location":"api/core/#dbcreds.core.exceptions","title":"<code>dbcreds.core.exceptions</code>","text":"<p>Custom exceptions for dbcreds.</p> <p>This module defines all custom exceptions used throughout the package.</p>"},{"location":"api/core/#dbcreds.core.exceptions-classes","title":"Classes","text":""},{"location":"api/core/#dbcreds.core.exceptions.BackendError","title":"<code>BackendError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when a backend operation fails.</p>"},{"location":"api/core/#dbcreds.core.exceptions.CredentialError","title":"<code>CredentialError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all credential-related errors.</p>"},{"location":"api/core/#dbcreds.core.exceptions.CredentialNotFoundError","title":"<code>CredentialNotFoundError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when requested credentials are not found.</p>"},{"location":"api/core/#dbcreds.core.exceptions.PasswordExpiredError","title":"<code>PasswordExpiredError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when a password has expired.</p>"},{"location":"api/core/#dbcreds.core.exceptions.ValidationError","title":"<code>ValidationError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when credential validation fails.</p>"},{"location":"api/web/","title":"Web API","text":""},{"location":"api/web/#fastapi-application","title":"FastAPI Application","text":""},{"location":"api/web/#dbcreds.web.main.app","title":"<code>dbcreds.web.main.app = FastAPI(title='dbcreds Web', description='Database Credentials Management', version=__version__, lifespan=lifespan)</code>  <code>module-attribute</code>","text":""},{"location":"api/web/#routes","title":"Routes","text":""},{"location":"api/web/#dbcreds.web.main","title":"<code>dbcreds.web.main</code>","text":"<p>FastAPI web application for dbcreds.</p> <p>Provides a web interface for managing database credentials with team collaboration features.</p>"},{"location":"api/web/#dbcreds.web.main-functions","title":"Functions","text":""},{"location":"api/web/#dbcreds.web.main.index","title":"<code>index(request: Request)</code>  <code>async</code>","text":"<p>Home page.</p>"},{"location":"api/web/#dbcreds.web.main.create_environment","title":"<code>create_environment(request: Request)</code>  <code>async</code>","text":"<p>Create a new environment.</p>"},{"location":"api/web/#dbcreds.web.main.list_environments","title":"<code>list_environments(request: Request)</code>  <code>async</code>","text":"<p>List all environments (HTMX endpoint).</p>"},{"location":"api/web/#dbcreds.web.main.edit_environment_form","title":"<code>edit_environment_form(request: Request, env_name: str)</code>  <code>async</code>","text":"<p>Get edit form for an environment.</p>"},{"location":"api/web/#dbcreds.web.main.update_environment","title":"<code>update_environment(request: Request, env_name: str)</code>  <code>async</code>","text":"<p>Update an environment.</p>"},{"location":"api/web/#dbcreds.web.main.test_environment","title":"<code>test_environment(request: Request, env_name: str)</code>  <code>async</code>","text":"<p>Test environment connection.</p>"},{"location":"api/web/#dbcreds.web.main.get_environment_expiry","title":"<code>get_environment_expiry(env_name: str)</code>  <code>async</code>","text":"<p>Get password expiry information for an environment.</p>"},{"location":"api/web/#authentication","title":"Authentication","text":""},{"location":"api/web/#dbcreds.web.auth","title":"<code>dbcreds.web.auth</code>","text":"<p>Authentication for the web interface.</p>"},{"location":"api/web/#dbcreds.web.auth-functions","title":"Functions","text":""},{"location":"api/web/#dbcreds.web.auth.get_current_user","title":"<code>get_current_user(credentials: HTTPBasicCredentials = Depends(security))</code>  <code>async</code>","text":"<p>Get the current authenticated user.</p>"},{"location":"api/web/#dbcreds.web.auth.authenticate_user","title":"<code>authenticate_user(username: str, password: str) -&gt; bool</code>","text":"<p>Authenticate a user.</p>"},{"location":"api/web/#error-handling","title":"Error Handling","text":""},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler","title":"<code>dbcreds.web.errors.WebErrorHandler()</code>","text":"<p>Rich error handler for web interface.</p> <p>Initialize with a console for stderr output.</p>"},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler-functions","title":"Functions","text":""},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler.get_error_response","title":"<code>get_error_response(request: Request, error: Exception, status_code: int = status.HTTP_500_INTERNAL_SERVER_ERROR) -&gt; HTMLResponse</code>","text":"<p>Get HTML error response for the web interface.</p>"},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler.log_error","title":"<code>log_error(error: Exception, request: Optional[Request] = None) -&gt; None</code>","text":"<p>Log error with rich formatting to console.</p>"},{"location":"examples/async/","title":"Async Examples","text":""},{"location":"examples/async/#asyncio-support","title":"AsyncIO Support","text":"<pre><code>import asyncio\nfrom dbcreds import get_async_engine\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nasync def fetch_data():\n    engine = await get_async_engine(\"dev\")\n\n    async with AsyncSession(engine) as session:\n        result = await session.execute(\"SELECT * FROM users\")\n        return result.fetchall()\n\n# Run async function\ndata = asyncio.run(fetch_data())\n</code></pre>"},{"location":"examples/async/#async-context-manager","title":"Async Context Manager","text":"<pre><code>async def process_data():\n    engine = await get_async_engine(\"dev\")\n\n    async with engine.connect() as conn:\n        result = await conn.execute(\"SELECT COUNT(*) FROM orders\")\n        count = result.scalar()\n        return count\n</code></pre>"},{"location":"examples/basic/","title":"Basic Usage Examples","text":"<p>This guide covers the most common dbcreds usage patterns.</p>"},{"location":"examples/basic/#quick-connection","title":"\ud83d\ude80 Quick Connection","text":"<p>The simplest way to get a database connection:</p> <pre><code>from dbcreds import get_connection_string\n\n# Get connection string\nconn_string = get_connection_string(\"prod\")\nprint(conn_string)\n# postgresql://user:pass@localhost:5432/mydb\n</code></pre>"},{"location":"examples/basic/#with-pandas","title":"\ud83d\udcca With Pandas","text":"<pre><code>import pandas as pd\nfrom dbcreds import get_connection_string\n\n# Read data directly\ndf = pd.read_sql(\n    \"SELECT * FROM users LIMIT 10\",\n    get_connection_string(\"analytics\")\n)\n\n# Write data\ndf.to_sql(\n    \"user_backup\",\n    get_connection_string(\"backup\"),\n    if_exists=\"replace\",\n    index=False\n)\n</code></pre>"},{"location":"examples/basic/#with-sqlalchemy","title":"\ud83d\udd27 With SQLAlchemy","text":"<pre><code>from sqlalchemy import create_engine, text\nfrom dbcreds import get_engine\n\n# Get pre-configured engine\nengine = get_engine(\"prod\")\n\n# Execute queries\nwith engine.connect() as conn:\n    result = conn.execute(text(\"SELECT COUNT(*) FROM users\"))\n    count = result.scalar()\n    print(f\"Total users: {count}\")\n\n# Or use ORM\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    # Your ORM queries here\n    pass\n</code></pre>"},{"location":"examples/basic/#with-psycopg2","title":"\ud83d\udc18 With psycopg2","text":"<pre><code>from dbcreds import get_connection\n\n# Using context manager\nwith get_connection(\"prod\") as conn:\n    with conn.cursor() as cur:\n        cur.execute(\"SELECT version()\")\n        version = cur.fetchone()[0]\n        print(f\"PostgreSQL version: {version}\")\n</code></pre>"},{"location":"examples/basic/#managing-credentials","title":"\ud83d\udd11 Managing Credentials","text":"<pre><code>from dbcreds import CredentialManager, DatabaseType\n\n# Initialize manager\nmanager = CredentialManager()\n\n# Add new environment\nmanager.add_environment(\n    \"staging\",\n    DatabaseType.POSTGRESQL,\n    description=\"Staging database\",\n    is_production=False\n)\n\n# Set credentials\nmanager.set_credentials(\n    \"staging\",\n    host=\"staging.db.company.com\",\n    port=5432,\n    database=\"app_staging\",\n    username=\"staging_user\",\n    password=\"secure_password\",\n    password_expires_days=90\n)\n\n# List all environments\nfor env in manager.list_environments():\n    print(f\"{env.name}: {env.database_type.value}\")\n</code></pre>"},{"location":"examples/basic/#fast-mode-examples","title":"\u26a1 Fast Mode Examples","text":""},{"location":"examples/basic/#environment-variables","title":"Environment Variables","text":"<pre><code># Set credentials via environment\nexport DBCREDS_PROD_HOST=db.company.com\nexport DBCREDS_PROD_PORT=5432\nexport DBCREDS_PROD_DATABASE=production\nexport DBCREDS_PROD_USERNAME=app_user\nexport DBCREDS_PROD_PASSWORD=secure_pass\n\n# Now Python can access instantly\npython -c \"from dbcreds import get_connection_string; print(get_connection_string('prod'))\"\n</code></pre>"},{"location":"examples/basic/#direct-fast-access","title":"Direct Fast Access","text":"<pre><code># Skip all initialization\nfrom dbcreds.fast import get_connection_string\n\n# Ultra-fast connection string\nconn = get_connection_string(\"prod\")\n</code></pre>"},{"location":"examples/basic/#security-examples","title":"\ud83d\udd12 Security Examples","text":""},{"location":"examples/basic/#password-free-connection-strings","title":"Password-Free Connection Strings","text":"<pre><code>from dbcreds import get_connection_string\n\n# Get connection string without password\nsafe_uri = get_connection_string(\"prod\", include_password=False)\nprint(safe_uri)\n# postgresql://user@localhost:5432/mydb\n\n# Useful for logging or display\nprint(f\"Connecting to: {safe_uri}\")\n</code></pre>"},{"location":"examples/basic/#checking-password-expiry","title":"Checking Password Expiry","text":"<pre><code>from dbcreds import get_credentials\n\n# Get full credentials\ncreds = get_credentials(\"prod\")\n\n# Check expiry\nif creds.is_password_expired():\n    print(\"WARNING: Password has expired!\")\nelse:\n    days_left = creds.days_until_expiry()\n    if days_left and days_left &lt; 14:\n        print(f\"Password expires in {days_left} days\")\n</code></pre>"},{"location":"examples/basic/#connection-pooling","title":"\ud83d\udd04 Connection Pooling","text":"<pre><code>from sqlalchemy.pool import QueuePool\nfrom dbcreds import get_engine\n\n# Create engine with custom pool settings\nengine = get_engine(\n    \"prod\",\n    poolclass=QueuePool,\n    pool_size=10,\n    max_overflow=20,\n    pool_pre_ping=True,  # Verify connections before use\n    pool_recycle=3600,   # Recycle connections after 1 hour\n)\n\n# Use for multiple queries\nwith engine.connect() as conn:\n    # Multiple queries share the pool\n    users = conn.execute(\"SELECT * FROM users\").fetchall()\n    orders = conn.execute(\"SELECT * FROM orders\").fetchall()\n</code></pre>"},{"location":"examples/basic/#error-handling","title":"\ud83d\udcdd Error Handling","text":"<pre><code>from dbcreds import get_connection_string, CredentialNotFoundError\n\ntry:\n    conn_string = get_connection_string(\"nonexistent\")\nexcept ValueError as e:  # Fast mode error\n    print(f\"Credentials not found: {e}\")\n\n# Or with full manager\nfrom dbcreds import CredentialManager\n\nmanager = CredentialManager()\ntry:\n    creds = manager.get_credentials(\"nonexistent\")\nexcept CredentialNotFoundError as e:\n    print(f\"Environment not configured: {e}\")\n</code></pre>"},{"location":"examples/basic/#environment-specific-code","title":"\ud83c\udfaf Environment-Specific Code","text":"<pre><code>import os\nfrom dbcreds import get_connection_string\n\n# Determine environment\nenv = os.getenv(\"APP_ENV\", \"dev\")\n\n# Get appropriate connection\nconn_string = get_connection_string(env)\n\n# Environment-specific settings\nif env == \"prod\":\n    engine_kwargs = {\n        \"pool_size\": 20,\n        \"max_overflow\": 30,\n        \"echo\": False\n    }\nelse:\n    engine_kwargs = {\n        \"pool_size\": 5,\n        \"max_overflow\": 10,\n        \"echo\": True  # SQL logging in dev\n    }\n\nfrom sqlalchemy import create_engine\nengine = create_engine(conn_string, **engine_kwargs)\n</code></pre>"},{"location":"examples/basic/#next-steps","title":"\ud83d\ude80 Next Steps","text":"<ul> <li>Learn about SQLAlchemy integration</li> <li>Explore async support</li> <li>Use with Pandas</li> <li>Build dashboards with marimo</li> </ul>"},{"location":"examples/marimo/","title":"Using dbcreds with Marimo Notebooks","text":"<p>dbcreds v2.0+ has built-in support for marimo notebooks with automatic fast mode detection.</p>"},{"location":"examples/marimo/#quick-start","title":"\ud83d\ude80 Quick Start","text":"<p>No configuration needed - just import and use:</p> <pre><code># In a marimo notebook\nimport marimo as mo\nfrom dbcreds import get_connection_string\nimport pandas as pd\nimport sqlalchemy as sa\n\n# Get connection string - lightning fast!\nconn_string = get_connection_string(\"prod\")\n\n# Create engine and query data\nengine = sa.create_engine(conn_string)\ndf = pd.read_sql(\"SELECT * FROM users LIMIT 10\", engine)\n\n# Display in marimo\nmo.md(f\"Found {len(df)} users\")\n</code></pre>"},{"location":"examples/marimo/#data-analysis-example","title":"\ud83d\udcca Data Analysis Example","text":"<pre><code>import marimo as mo\nimport pandas as pd\nimport plotly.express as px\nfrom dbcreds import get_connection_string\n\n# Get connection - no hanging!\nconn = get_connection_string(\"analytics\")\n\n# Load data\nquery = \"\"\"\nSELECT \n    DATE_TRUNC('day', created_at) as date,\n    COUNT(*) as signups\nFROM users\nWHERE created_at &gt;= CURRENT_DATE - INTERVAL '30 days'\nGROUP BY 1\nORDER BY 1\n\"\"\"\n\ndf = pd.read_sql(query, conn)\n\n# Visualize\nfig = px.line(df, x='date', y='signups', \n              title='Daily Signups - Last 30 Days')\n\nmo.ui.plotly(fig)\n</code></pre>"},{"location":"examples/marimo/#interactive-queries","title":"\ud83d\udd04 Interactive Queries","text":"<pre><code>import marimo as mo\nfrom dbcreds import get_connection_string\nimport pandas as pd\n\n# Create UI elements\ntable_name = mo.ui.text(value=\"users\", label=\"Table Name\")\nlimit = mo.ui.slider(1, 100, value=10, label=\"Limit\")\n\nmo.md(f\"\"\"\n## Interactive Database Explorer\n\nTable: {table_name}  \nLimit: {limit}\n\"\"\")\n\n# When values change, this runs automatically\nif table_name.value:\n    conn = get_connection_string(\"prod\")\n    query = f\"SELECT * FROM {table_name.value} LIMIT {limit.value}\"\n\n    try:\n        df = pd.read_sql(query, conn)\n        mo.ui.dataframe(df)\n    except Exception as e:\n        mo.md(f\"\u274c Error: {e}\")\n</code></pre>"},{"location":"examples/marimo/#dashboard-example","title":"\ud83c\udfa8 Dashboard Example","text":"<pre><code>import marimo as mo\nimport pandas as pd\nimport altair as alt\nfrom dbcreds import get_connection_string\nfrom datetime import datetime, timedelta\n\n# Get connection\nconn = get_connection_string(\"analytics\")\n\n# Date range picker\ndate_range = mo.ui.date_range(\n    start=datetime.now() - timedelta(days=30),\n    stop=datetime.now(),\n    label=\"Date Range\"\n)\n\n# Metric selector\nmetric = mo.ui.dropdown(\n    options=[\"Revenue\", \"Users\", \"Orders\"],\n    value=\"Revenue\",\n    label=\"Metric\"\n)\n\nmo.md(f\"\"\"\n# \ud83d\udcca Business Dashboard\n\n**Date Range:** {date_range.value[0].strftime('%Y-%m-%d')} to {date_range.value[1].strftime('%Y-%m-%d')}  \n**Metric:** {metric.value}\n\"\"\")\n\n# Query based on selections\nif date_range.value and metric.value:\n    query = f\"\"\"\n    SELECT \n        date,\n        {metric.value.lower()} as value\n    FROM daily_metrics\n    WHERE date BETWEEN %s AND %s\n    ORDER BY date\n    \"\"\"\n\n    df = pd.read_sql(\n        query, \n        conn,\n        params=[date_range.value[0], date_range.value[1]]\n    )\n\n    # Create chart\n    chart = alt.Chart(df).mark_line(point=True).encode(\n        x='date:T',\n        y='value:Q',\n        tooltip=['date', 'value']\n    ).properties(\n        width=700,\n        height=400,\n        title=f'{metric.value} Over Time'\n    )\n\n    mo.ui.altair_chart(chart)\n</code></pre>"},{"location":"examples/marimo/#performance-tips","title":"\u26a1 Performance Tips","text":""},{"location":"examples/marimo/#1-use-connection-pooling","title":"1. Use Connection Pooling","text":"<pre><code>from sqlalchemy import create_engine\nfrom sqlalchemy.pool import QueuePool\nfrom dbcreds import get_connection_string\n\n# Create engine with connection pool\nengine = create_engine(\n    get_connection_string(\"prod\"),\n    poolclass=QueuePool,\n    pool_size=5,\n    max_overflow=10\n)\n\n# Reuse across queries\ndf1 = pd.read_sql(\"SELECT * FROM table1\", engine)\ndf2 = pd.read_sql(\"SELECT * FROM table2\", engine)\n</code></pre>"},{"location":"examples/marimo/#2-cache-expensive-queries","title":"2. Cache Expensive Queries","text":"<pre><code>import marimo as mo\nfrom functools import lru_cache\nfrom dbcreds import get_connection_string\nimport pandas as pd\n\n@lru_cache(maxsize=32)\ndef get_user_data(user_id: int) -&gt; pd.DataFrame:\n    conn = get_connection_string(\"prod\")\n    return pd.read_sql(\n        \"SELECT * FROM users WHERE id = %s\",\n        conn,\n        params=[user_id]\n    )\n\n# Subsequent calls with same user_id are cached\nuser_id = mo.ui.number(1, 1000, 1, label=\"User ID\")\ndf = get_user_data(user_id.value)\n</code></pre>"},{"location":"examples/marimo/#3-async-queries-for-better-ux","title":"3. Async Queries for Better UX","text":"<pre><code>import marimo as mo\nimport asyncio\nimport pandas as pd\nfrom dbcreds import get_connection_string\n\nasync def fetch_data_async(query: str):\n    # In real app, use async database driver\n    await asyncio.sleep(0.1)  # Simulate async work\n    conn = get_connection_string(\"prod\")\n    return pd.read_sql(query, conn)\n\n# Show loading state\nwith mo.status.spinner(\"Loading data...\"):\n    df = await fetch_data_async(\"SELECT * FROM large_table\")\n\nmo.md(f\"Loaded {len(df):,} rows\")\n</code></pre>"},{"location":"examples/marimo/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":""},{"location":"examples/marimo/#still-getting-import-delays","title":"Still Getting Import Delays?","text":"<ol> <li> <p>Check marimo detection: <pre><code>import dbcreds\nprint(f\"Fast mode active: {dbcreds.USE_FAST_MODE}\")\nprint(f\"Marimo detected: {dbcreds.IS_MARIMO}\")\n</code></pre></p> </li> <li> <p>Force fast mode: <pre><code>import os\nos.environ['DBCREDS_FAST_MODE'] = 'true'\nfrom dbcreds import get_connection_string\n</code></pre></p> </li> <li> <p>Use direct fast import: <pre><code>from dbcreds.fast import get_connection_string\n</code></pre></p> </li> </ol>"},{"location":"examples/marimo/#connection-string-not-found","title":"Connection String Not Found?","text":"<p>Make sure credentials are stored in a fast-accessible location:</p> <pre><code># Set environment variables (fastest)\nexport DBCREDS_PROD_HOST=localhost\nexport DBCREDS_PROD_PORT=5432\nexport DBCREDS_PROD_DATABASE=mydb\nexport DBCREDS_PROD_USERNAME=user\nexport DBCREDS_PROD_PASSWORD=pass\n\n# Or use dbcreds CLI to store in credential manager\ndbcreds add prod --host localhost --port 5432 ...\n</code></pre>"},{"location":"examples/marimo/#more-examples","title":"\ud83d\udcda More Examples","text":"<p>Find more marimo + dbcreds examples:</p> <ul> <li>Data Analysis Notebooks</li> <li>Interactive Dashboards</li> <li>ETL Pipelines</li> </ul>"},{"location":"examples/pandas/","title":"Pandas Examples","text":""},{"location":"examples/pandas/#reading-data","title":"Reading Data","text":"<pre><code>import pandas as pd\nfrom dbcreds import get_connection, get_engine\n\n# Using connection\nwith get_connection(\"dev\") as conn:\n    df = pd.read_sql(\"SELECT * FROM sales\", conn)\n\n# Using engine (recommended)\nengine = get_engine(\"dev\")\ndf = pd.read_sql_table(\"sales\", engine)\n</code></pre>"},{"location":"examples/pandas/#writing-data","title":"Writing Data","text":"<pre><code># Write DataFrame to database\ndf.to_sql(\"sales_backup\", engine, if_exists=\"replace\", index=False)\n</code></pre>"},{"location":"examples/pandas/#large-datasets","title":"Large Datasets","text":"<pre><code># Read in chunks\nfor chunk in pd.read_sql(\"SELECT * FROM large_table\", \n                         engine, chunksize=10000):\n    process(chunk)\n</code></pre>"},{"location":"examples/sqlalchemy/","title":"SQLAlchemy Examples","text":""},{"location":"examples/sqlalchemy/#basic-usage","title":"Basic Usage","text":"<pre><code>from dbcreds import get_engine\nimport pandas as pd\n\n# Get engine for environment\nengine = get_engine(\"dev\")\n\n# Use with pandas\ndf = pd.read_sql(\"SELECT * FROM users LIMIT 10\", engine)\n\n# Use with SQLAlchemy ORM\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    result = session.execute(\"SELECT 1\")\n</code></pre>"},{"location":"examples/sqlalchemy/#async-support","title":"Async Support","text":"<pre><code>from dbcreds import get_async_engine\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nengine = await get_async_engine(\"dev\")\n\nasync with AsyncSession(engine) as session:\n    result = await session.execute(\"SELECT 1\")\n</code></pre>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#configuration-directory","title":"Configuration Directory","text":"<p>dbcreds stores its configuration in <code>~/.dbcreds/</code> by default.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can override the configuration directory:</p> <pre><code>export DBCREDS_CONFIG_DIR=/path/to/config\n</code></pre>"},{"location":"getting-started/configuration/#backend-configuration","title":"Backend Configuration","text":"<p>dbcreds automatically detects available backends. See Backends for details.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>pip or uv</li> </ul>"},{"location":"getting-started/installation/#install-from-github","title":"Install from GitHub","text":"<pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds\n</code></pre>"},{"location":"getting-started/installation/#install-with-extras","title":"Install with extras","text":"<pre><code># PostgreSQL only (default)\npip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds\n\n# With MySQL support\npip install \"git+https://github.com/Sunnova-ShakesDlamini/dbcreds#egg=dbcreds[mysql]\"\n\n# With all databases\npip install \"git+https://github.com/Sunnova-ShakesDlamini/dbcreds#egg=dbcreds[mysql,oracle,mssql]\"\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<pre><code>git clone https://github.com/Sunnova-ShakesDlamini/dbcreds\ncd dbcreds\nuv venv\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/performance/","title":"Performance &amp; Lazy Loading","text":"<p>dbcreds v2.0 introduces intelligent lazy loading to ensure fast imports and optimal performance, especially in environments like Jupyter and marimo notebooks.</p>"},{"location":"getting-started/performance/#fast-mode","title":"\ud83d\ude80 Fast Mode","text":""},{"location":"getting-started/performance/#automatic-detection","title":"Automatic Detection","text":"<p>dbcreds automatically detects when it's running in a marimo notebook and switches to fast mode:</p> <pre><code># In marimo - no configuration needed!\nfrom dbcreds import get_connection_string\nconn_string = get_connection_string(\"prod\")  # Lightning fast!\n</code></pre>"},{"location":"getting-started/performance/#manual-fast-mode","title":"Manual Fast Mode","text":"<p>You can enable fast mode anywhere using an environment variable:</p> <pre><code>export DBCREDS_FAST_MODE=true\npython your_script.py\n</code></pre> <p>Or programmatically:</p> <pre><code>import os\nos.environ['DBCREDS_FAST_MODE'] = 'true'\n\nfrom dbcreds import get_connection_string\nconn_string = get_connection_string(\"prod\")\n</code></pre>"},{"location":"getting-started/performance/#direct-fast-access","title":"Direct Fast Access","text":"<p>Use the dedicated fast function to bypass all initialization:</p> <pre><code>from dbcreds import get_connection_string_fast\nconn_string = get_connection_string_fast(\"prod\")\n</code></pre>"},{"location":"getting-started/performance/#how-it-works","title":"\u26a1 How It Works","text":""},{"location":"getting-started/performance/#lazy-module-loading","title":"Lazy Module Loading","text":"<p>dbcreds uses Python's <code>__getattr__</code> to defer imports until actually needed:</p> <pre><code># This doesn't load anything heavy\nimport dbcreds\n\n# Only loads what's needed when you use it\nconn_string = dbcreds.get_connection_string(\"prod\")\n</code></pre>"},{"location":"getting-started/performance/#credential-resolution-order","title":"Credential Resolution Order","text":"<p>In fast mode, dbcreds checks credentials in this order:</p> <ol> <li>Environment Variables (fastest)</li> <li><code>DBCREDS_ENV_*</code> format</li> <li> <p>Legacy <code>DB_*</code> format (PowerShell compatibility)</p> </li> <li> <p>Windows Credential Manager (Windows only)</p> </li> <li> <p>Direct API access without backend initialization</p> </li> <li> <p>Error if not found</p> </li> </ol>"},{"location":"getting-started/performance/#performance-comparison","title":"Performance Comparison","text":"<pre><code># Standard mode (full initialization)\n# Import time: ~0.8-1.2 seconds\nfrom dbcreds import CredentialManager\nmanager = CredentialManager()\n\n# Fast mode (lazy loading)\n# Import time: ~0.05-0.1 seconds\nfrom dbcreds import get_connection_string\nconn_string = get_connection_string(\"prod\")\n</code></pre>"},{"location":"getting-started/performance/#when-to-use-each-mode","title":"\ud83c\udfaf When to Use Each Mode","text":""},{"location":"getting-started/performance/#use-fast-mode-when","title":"Use Fast Mode When:","text":"<ul> <li>Working in Jupyter/marimo notebooks</li> <li>Building CLI tools that need quick startup</li> <li>Only need connection strings (not full credential management)</li> <li>Running in CI/CD pipelines</li> <li>Building microservices with tight startup constraints</li> </ul>"},{"location":"getting-started/performance/#use-standard-mode-when","title":"Use Standard Mode When:","text":"<ul> <li>Managing credentials (add/update/remove)</li> <li>Using the web interface</li> <li>Running credential rotation</li> <li>Testing connections</li> <li>Accessing full credential metadata</li> </ul>"},{"location":"getting-started/performance/#configuration","title":"\ud83d\udd27 Configuration","text":""},{"location":"getting-started/performance/#environment-variables","title":"Environment Variables","text":"<p>Control dbcreds behavior with environment variables:</p> <pre><code># Enable fast mode globally\nexport DBCREDS_FAST_MODE=true\n\n# Enable debug logging (standard mode only)\nexport DBCREDS_DEBUG=true\n\n# Custom config directory\nexport DBCREDS_CONFIG_DIR=/custom/path\n</code></pre>"},{"location":"getting-started/performance/#programmatic-control","title":"Programmatic Control","text":"<pre><code># Check if in fast mode\nimport dbcreds\nif dbcreds.USE_FAST_MODE:\n    print(\"Running in fast mode!\")\n\n# Force standard mode even in marimo\nimport os\nos.environ['DBCREDS_FAST_MODE'] = 'false'\nimport dbcreds  # Full initialization\n</code></pre>"},{"location":"getting-started/performance/#benchmarks","title":"\ud83d\udcca Benchmarks","text":"<p>Typical import times on modern hardware:</p> Mode Import Time Memory Usage Standard Mode 0.8-1.2s ~25MB Fast Mode 0.05-0.1s ~5MB Direct Fast 0.02-0.05s ~3MB"},{"location":"getting-started/performance/#troubleshooting","title":"\ud83d\udee0\ufe0f Troubleshooting","text":""},{"location":"getting-started/performance/#import-still-slow","title":"Import Still Slow?","text":"<ol> <li> <p>Ensure you're using the latest version:    <pre><code>pip install --upgrade dbcreds\n</code></pre></p> </li> <li> <p>Check if fast mode is active:    <pre><code>import dbcreds\nprint(f\"Fast mode: {dbcreds.USE_FAST_MODE}\")\n</code></pre></p> </li> <li> <p>Use direct fast access:    <pre><code>from dbcreds.fast import get_connection_string\n</code></pre></p> </li> </ol>"},{"location":"getting-started/performance/#fast-mode-limitations","title":"Fast Mode Limitations","text":"<p>In fast mode, these features are not available:</p> <ul> <li><code>CredentialManager</code> class</li> <li>Credential add/update/remove operations  </li> <li>Web interface</li> <li>Connection testing</li> <li>Password rotation checks</li> </ul> <p>To use these features, disable fast mode:</p> <pre><code>import os\nos.environ['DBCREDS_FAST_MODE'] = 'false'\nfrom dbcreds import CredentialManager\n</code></pre>"},{"location":"getting-started/performance/#debugging-performance","title":"\ud83d\udd0d Debugging Performance","text":"<p>Enable timing logs to debug import performance:</p> <pre><code>import time\nstart = time.time()\nfrom dbcreds import get_connection_string\nprint(f\"Import took {time.time() - start:.3f}s\")\n\n# More detailed timing\nimport sys\nimport importlib\n\ndef time_import(module_name):\n    start = time.time()\n    module = importlib.import_module(module_name)\n    elapsed = time.time() - start\n    print(f\"{module_name}: {elapsed:.3f}s\")\n    return module\n\n# Time individual components\ntime_import('dbcreds')\ntime_import('dbcreds.core')\ntime_import('dbcreds.utils.shortcuts')\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get started with dbcreds in just a few minutes!</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds\n</code></pre>"},{"location":"getting-started/quickstart/#initialize-dbcreds","title":"Initialize dbcreds","text":"<pre><code>dbcreds init\n</code></pre> <p>This creates the configuration directory and checks available backends.</p>"},{"location":"getting-started/quickstart/#add-your-first-environment","title":"Add Your First Environment","text":"<pre><code>dbcreds add dev --type postgresql\n</code></pre> <p>You'll be prompted for: - Database host - Port (defaults to 5432 for PostgreSQL) - Database name - Username - Password</p>"},{"location":"getting-started/quickstart/#use-in-python","title":"Use in Python","text":"<pre><code>from dbcreds import get_connection\nimport pandas as pd\n\n# Get a connection\nwith get_connection(\"dev\") as conn:\n    df = pd.read_sql(\"SELECT * FROM my_table LIMIT 10\", conn)\n    print(df.head())\n</code></pre>"},{"location":"getting-started/quickstart/#using-with-sqlalchemy","title":"Using with SQLAlchemy","text":"<pre><code>from dbcreds import get_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# Get an engine\nengine = get_engine(\"dev\")\n\n# Create a session\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Use the session\nresults = session.execute(\"SELECT 1\")\nprint(results.scalar())\n</code></pre>"},{"location":"getting-started/quickstart/#check-password-expiry","title":"Check Password Expiry","text":"<pre><code>dbcreds check\n</code></pre> <p>This shows you which passwords are expired or expiring soon.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about different backends</li> <li>Set up the web interface</li> <li>Configure password rotation</li> </ul>"},{"location":"guide/backends/","title":"Storage Backends","text":"<p>dbcreds supports multiple credential storage backends.</p>"},{"location":"guide/backends/#available-backends","title":"Available Backends","text":""},{"location":"guide/backends/#keyring-backend","title":"Keyring Backend","text":"<p>Cross-platform using system credential stores.</p>"},{"location":"guide/backends/#windows-credential-manager","title":"Windows Credential Manager","text":"<p>Native Windows credential storage.</p>"},{"location":"guide/backends/#environment-variables","title":"Environment Variables","text":"<p>Read credentials from environment.</p>"},{"location":"guide/backends/#config-file","title":"Config File","text":"<p>JSON file storage (metadata only).</p>"},{"location":"guide/backends/#backend-priority","title":"Backend Priority","text":"<p>Backends are tried in order of security and availability.</p> <p>See Backend API for implementation details.</p>"},{"location":"guide/cli/","title":"CLI Reference","text":"<p>The <code>dbcreds</code> command provides a rich CLI for managing credentials.</p>"},{"location":"guide/cli/#commands","title":"Commands","text":""},{"location":"guide/cli/#dbcreds.cli","title":"<code>dbcreds.cli</code>","text":"<p>Command-line interface for dbcreds.</p> <p>This module provides a rich, user-friendly CLI for managing database credentials using Typer and Rich.</p>"},{"location":"guide/cli/#usage-examples","title":"Usage Examples","text":""},{"location":"guide/cli/#initialize","title":"Initialize","text":"<pre><code>dbcreds init\n</code></pre>"},{"location":"guide/cli/#add-environment","title":"Add Environment","text":"<pre><code>dbcreds add dev --type postgresql\n</code></pre>"},{"location":"guide/cli/#list-environments","title":"List Environments","text":"<pre><code>dbcreds list\n</code></pre>"},{"location":"guide/cli/#show-details","title":"Show Details","text":"<pre><code>dbcreds show dev\n</code></pre>"},{"location":"guide/cli/#test-connection","title":"Test Connection","text":"<pre><code>dbcreds test dev\n</code></pre>"},{"location":"guide/cli/#check-expiry","title":"Check Expiry","text":"<pre><code>dbcreds check\n</code></pre>"},{"location":"guide/migration/","title":"Migration Guide","text":""},{"location":"guide/migration/#from-powershell-profile","title":"From PowerShell Profile","text":"<p>If you have existing credentials in PowerShell, use the migration tool:</p> <pre><code>dbcreds-migrate --name dev\n</code></pre> <p>This will import credentials from: - Environment variables (<code>DB_SERVER</code>, <code>DB_PORT</code>, etc.) - Windows Credential Manager - JSON config at <code>~/.db_credentials/config.json</code></p>"},{"location":"guide/migration/#manual-migration","title":"Manual Migration","text":""},{"location":"guide/migration/#dbcreds.migrate","title":"<code>dbcreds.migrate</code>","text":"<p>Migration script for importing existing PowerShell credentials into dbcreds.</p>"},{"location":"guide/migration/#dbcreds.migrate-classes","title":"Classes","text":""},{"location":"guide/migration/#dbcreds.migrate-functions","title":"Functions","text":""},{"location":"guide/migration/#dbcreds.migrate.detect_database_type","title":"<code>detect_database_type(port: int, server: str = '') -&gt; DatabaseType</code>","text":"<p>Detect database type from port or server name.</p>"},{"location":"guide/migration/#dbcreds.migrate.main","title":"<code>main(env_name: str = typer.Option('default', '--name', '-n', help='Environment name for dbcreds'), force: bool = typer.Option(False, '--force', '-f', help='Overwrite if exists'))</code>","text":"<p>Import credentials from PowerShell environment variables.</p>"},{"location":"guide/python-api/","title":"Python API","text":""},{"location":"guide/python-api/#quick-start","title":"Quick Start","text":"<pre><code>from dbcreds import get_connection, get_engine\n\n# Get a connection\nwith get_connection(\"dev\") as conn:\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT 1\")\n\n# Get SQLAlchemy engine\nengine = get_engine(\"dev\")\n</code></pre>"},{"location":"guide/python-api/#shortcut-functions","title":"Shortcut Functions","text":""},{"location":"guide/python-api/#dbcreds.utils.shortcuts","title":"<code>dbcreds.utils.shortcuts</code>","text":"<p>Convenience functions for common dbcreds operations.</p> <p>This module provides simple shortcuts for the most common use cases, making it easy to get started with dbcreds.</p>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts-functions","title":"Functions","text":""},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_async_engine","title":"<code>get_async_engine(environment: str = 'default', **kwargs)</code>  <code>async</code>","text":"<p>Get an async SQLAlchemy engine for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     **kwargs: Additional engine parameters</p> <p>Returns:     SQLAlchemy AsyncEngine object</p> <p>Examples:     &gt;&gt;&gt; engine = await get_async_engine(\"dev\")     &gt;&gt;&gt; async with engine.connect() as conn:     ...     result = await conn.execute(\"SELECT 1\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>async def get_async_engine(environment: str = \"default\", **kwargs):\n    \"\"\"\n    Get an async SQLAlchemy engine for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        **kwargs: Additional engine parameters\n\n    Returns:\n        SQLAlchemy AsyncEngine object\n\n    Examples:\n        &gt;&gt;&gt; engine = await get_async_engine(\"dev\")\n        &gt;&gt;&gt; async with engine.connect() as conn:\n        ...     result = await conn.execute(\"SELECT 1\")\n    \"\"\"\n    from sqlalchemy.ext.asyncio import create_async_engine\n\n    manager = _get_manager()\n    creds = manager.get_credentials(environment)\n    env = manager.environments.get(environment.lower())\n\n    if not env:\n        raise _get_credential_error()(f\"Environment '{environment}' not found\")\n\n    # Import DatabaseType only when needed\n    from dbcreds.core.models import DatabaseType\n\n    # Build async connection string\n    if env.database_type == DatabaseType.POSTGRESQL:\n        driver = \"postgresql+asyncpg\"\n    elif env.database_type == DatabaseType.MYSQL:\n        driver = \"mysql+aiomysql\"\n    else:\n        raise NotImplementedError(f\"Async support for {env.database_type} not yet implemented\")\n\n    conn_string = f\"{driver}://{creds.username}:{creds.password.get_secret_value()}@{creds.host}:{creds.port}/{creds.database}\"\n    return create_async_engine(conn_string, **kwargs)\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_connection","title":"<code>get_connection(environment: str = 'default', **kwargs)</code>","text":"<p>Get a database connection for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     **kwargs: Additional connection parameters</p> <p>Yields:     Database connection object</p> <p>Examples:     &gt;&gt;&gt; with get_connection(\"dev\") as conn:     ...     cursor = conn.cursor()     ...     cursor.execute(\"SELECT 1\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>@contextmanager\ndef get_connection(environment: str = \"default\", **kwargs):\n    \"\"\"\n    Get a database connection for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        **kwargs: Additional connection parameters\n\n    Yields:\n        Database connection object\n\n    Examples:\n        &gt;&gt;&gt; with get_connection(\"dev\") as conn:\n        ...     cursor = conn.cursor()\n        ...     cursor.execute(\"SELECT 1\")\n    \"\"\"\n    manager = _get_manager()\n    creds = manager.get_credentials(environment)\n    env = manager.environments.get(environment.lower())\n\n    if not env:\n        raise _get_credential_error()(f\"Environment '{environment}' not found\")\n\n    # Import DatabaseType only when needed\n    from dbcreds.core.models import DatabaseType\n\n    # Get appropriate connection based on database type\n    if env.database_type == DatabaseType.POSTGRESQL:\n        import psycopg2\n\n        conn_params = {\n            \"host\": creds.host,\n            \"port\": creds.port,\n            \"database\": creds.database,\n            \"user\": creds.username,\n            \"password\": creds.password.get_secret_value(),\n            **kwargs,\n        }\n        conn = psycopg2.connect(**conn_params)\n        try:\n            yield conn\n        finally:\n            conn.close()\n\n    elif env.database_type == DatabaseType.MYSQL:\n        import MySQLdb\n\n        conn_params = {\n            \"host\": creds.host,\n            \"port\": creds.port,\n            \"db\": creds.database,\n            \"user\": creds.username,\n            \"passwd\": creds.password.get_secret_value(),\n            **kwargs,\n        }\n        conn = MySQLdb.connect(**conn_params)\n        try:\n            yield conn\n        finally:\n            conn.close()\n\n    else:\n        raise NotImplementedError(f\"Database type {env.database_type} not yet implemented\")\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_connection_string","title":"<code>get_connection_string(environment: str = 'default', include_password: bool = True) -&gt; str</code>","text":"<p>Get a database connection string for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     include_password: Whether to include password in the string</p> <p>Returns:     Database connection URI</p> <p>Examples:     &gt;&gt;&gt; uri = get_connection_string(\"dev\")     &gt;&gt;&gt; print(uri)     'postgresql://user:pass@localhost:5432/mydb'</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>def get_connection_string(environment: str = \"default\", include_password: bool = True) -&gt; str:\n    \"\"\"\n    Get a database connection string for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        include_password: Whether to include password in the string\n\n    Returns:\n        Database connection URI\n\n    Examples:\n        &gt;&gt;&gt; uri = get_connection_string(\"dev\")\n        &gt;&gt;&gt; print(uri)\n        'postgresql://user:pass@localhost:5432/mydb'\n    \"\"\"\n    # Try fast method first if we're in fast mode\n    if os.environ.get('DBCREDS_FAST_MODE', '').lower() == 'true':\n        return get_connection_string_fast(environment)\n\n    creds = get_credentials(environment)\n    return creds.get_connection_string(include_password=include_password)\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_connection_string_fast","title":"<code>get_connection_string_fast(environment: str = 'default') -&gt; str</code>  <code>cached</code>","text":"<p>Get database connection string using fast, marimo-friendly method.</p> <p>This function bypasses the normal credential manager initialization and directly reads from environment variables or Windows Credential Manager. This is optimized for use in marimo notebooks where the standard import can cause hanging issues.</p> <p>Args:     environment: Environment name (default: \"default\")</p> <p>Returns:     Database connection URI</p> <p>Raises:     ValueError: If credentials not found</p> <p>Examples:     &gt;&gt;&gt; # In a marimo notebook     &gt;&gt;&gt; from dbcreds import get_connection_string_fast     &gt;&gt;&gt; conn_string = get_connection_string_fast(\"fusionods\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>@lru_cache(maxsize=10)\ndef get_connection_string_fast(environment: str = \"default\") -&gt; str:\n    \"\"\"\n    Get database connection string using fast, marimo-friendly method.\n\n    This function bypasses the normal credential manager initialization\n    and directly reads from environment variables or Windows Credential Manager.\n    This is optimized for use in marimo notebooks where the standard import\n    can cause hanging issues.\n\n    Args:\n        environment: Environment name (default: \"default\")\n\n    Returns:\n        Database connection URI\n\n    Raises:\n        ValueError: If credentials not found\n\n    Examples:\n        &gt;&gt;&gt; # In a marimo notebook\n        &gt;&gt;&gt; from dbcreds import get_connection_string_fast\n        &gt;&gt;&gt; conn_string = get_connection_string_fast(\"fusionods\")\n    \"\"\"\n    # Check environment variables first\n    conn_string = _get_from_environment(environment)\n    if conn_string:\n        return conn_string\n\n    # Fall back to Windows Credential Manager\n    if os.name == 'nt':\n        conn_string = _get_from_windows_credential_manager(environment)\n        if conn_string:\n            return conn_string\n\n    raise ValueError(\n        f\"No credentials found for environment '{environment}'. \"\n        \"Please ensure credentials are set in environment variables or Windows Credential Manager.\"\n    )\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_credentials","title":"<code>get_credentials(environment: str = 'default')</code>","text":"<p>Get database credentials for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")</p> <p>Returns:     DatabaseCredentials object</p> <p>Examples:     &gt;&gt;&gt; creds = get_credentials(\"dev\")     &gt;&gt;&gt; print(f\"Connecting to {creds.host}:{creds.port}\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>def get_credentials(environment: str = \"default\"):\n    \"\"\"\n    Get database credentials for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n\n    Returns:\n        DatabaseCredentials object\n\n    Examples:\n        &gt;&gt;&gt; creds = get_credentials(\"dev\")\n        &gt;&gt;&gt; print(f\"Connecting to {creds.host}:{creds.port}\")\n    \"\"\"\n    manager = _get_manager()\n    return manager.get_credentials(environment)\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_engine","title":"<code>get_engine(environment: str = 'default', **kwargs)</code>","text":"<p>Get a SQLAlchemy engine for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     **kwargs: Additional engine parameters</p> <p>Returns:     SQLAlchemy Engine object</p> <p>Examples:     &gt;&gt;&gt; engine = get_engine(\"dev\")     &gt;&gt;&gt; with engine.connect() as conn:     ...     result = conn.execute(\"SELECT 1\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>def get_engine(environment: str = \"default\", **kwargs):\n    \"\"\"\n    Get a SQLAlchemy engine for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        **kwargs: Additional engine parameters\n\n    Returns:\n        SQLAlchemy Engine object\n\n    Examples:\n        &gt;&gt;&gt; engine = get_engine(\"dev\")\n        &gt;&gt;&gt; with engine.connect() as conn:\n        ...     result = conn.execute(\"SELECT 1\")\n    \"\"\"\n    global _sqlalchemy\n    if _sqlalchemy is None:\n        from sqlalchemy import create_engine\n        _sqlalchemy = create_engine\n\n    conn_string = get_connection_string(environment)\n    return _sqlalchemy(conn_string, **kwargs)\n</code></pre>"},{"location":"guide/python-api/#core-classes","title":"Core Classes","text":"<p>See API Reference for detailed class documentation.</p>"},{"location":"guide/rotation/","title":"Password Rotation","text":""},{"location":"guide/rotation/#automatic-expiry-tracking","title":"Automatic Expiry Tracking","text":"<p>dbcreds tracks password age and expiry:</p> <pre><code>from dbcreds import get_credentials\n\ncreds = get_credentials(\"dev\")\ndays_left = creds.days_until_expiry()\nif creds.is_password_expired():\n    print(\"Password expired!\")\n</code></pre>"},{"location":"guide/rotation/#setting-expiry","title":"Setting Expiry","text":"<pre><code># Set 90-day expiry\ndbcreds add dev --expires-days 90\n\n# Update expiry\ndbcreds update dev --expires-days 180\n</code></pre>"},{"location":"guide/rotation/#checking-status","title":"Checking Status","text":"<pre><code># Check all environments\ndbcreds check\n</code></pre>"},{"location":"guide/web-interface/","title":"Web Interface","text":""},{"location":"guide/web-interface/#starting-the-server","title":"Starting the Server","text":"<pre><code>dbcreds-server\n</code></pre> <p>Visit http://localhost:8000</p>"},{"location":"guide/web-interface/#features","title":"Features","text":"<ul> <li>Visual credential management</li> <li>Password expiry tracking</li> <li>Team collaboration</li> <li>Secure authentication</li> </ul>"},{"location":"guide/web-interface/#configuration","title":"Configuration","text":"<p>The web interface uses FastAPI and HTMX for a modern, responsive UI.</p>"},{"location":"guide/web-interface/#api-endpoints","title":"API Endpoints","text":""},{"location":"guide/web-interface/#dbcreds.web.main","title":"<code>dbcreds.web.main</code>","text":"<p>FastAPI web application for dbcreds.</p> <p>Provides a web interface for managing database credentials with team collaboration features.</p>"},{"location":"guide/web-interface/#dbcreds.web.main-attributes","title":"Attributes","text":""},{"location":"guide/web-interface/#dbcreds.web.main.app","title":"<code>app = FastAPI(title='dbcreds Web', description='Database Credentials Management', version=__version__, lifespan=lifespan)</code>  <code>module-attribute</code>","text":""},{"location":"guide/web-interface/#dbcreds.web.main-functions","title":"Functions","text":""},{"location":"guide/web-interface/#dbcreds.web.main.index","title":"<code>index(request: Request)</code>  <code>async</code>","text":"<p>Home page.</p>"},{"location":"guide/web-interface/#dbcreds.web.main.create_environment","title":"<code>create_environment(request: Request)</code>  <code>async</code>","text":"<p>Create a new environment.</p>"},{"location":"guide/web-interface/#dbcreds.web.main.list_environments","title":"<code>list_environments(request: Request)</code>  <code>async</code>","text":"<p>List all environments (HTMX endpoint).</p>"},{"location":"security/backends/","title":"Security Backends","text":""},{"location":"security/backends/#backend-security","title":"Backend Security","text":"<p>Each backend provides different security guarantees:</p>"},{"location":"security/backends/#keyring-backend","title":"Keyring Backend","text":"<ul> <li>Uses OS-native credential storage</li> <li>Encrypted at rest</li> <li>User-level isolation</li> </ul>"},{"location":"security/backends/#windows-credential-manager","title":"Windows Credential Manager","text":"<ul> <li>Windows DPAPI encryption</li> <li>Integrated with Windows security</li> </ul>"},{"location":"security/backends/#environment-variables","title":"Environment Variables","text":"<ul> <li>No encryption</li> <li>Suitable for containers</li> <li>Should use secrets management</li> </ul>"},{"location":"security/backends/#backend-interface","title":"Backend Interface","text":"<p>See the Backend API Reference for implementation details.</p>"},{"location":"security/best-practices/","title":"Security Best Practices","text":"<p>Follow these best practices to ensure your database credentials remain secure.</p>"},{"location":"security/best-practices/#credential-storage","title":"\ud83d\udd10 Credential Storage","text":""},{"location":"security/best-practices/#use-system-credential-stores","title":"Use System Credential Stores","text":"<p>dbcreds automatically uses the most secure storage available:</p> <ul> <li>Windows: Windows Credential Manager</li> <li>macOS: Keychain</li> <li>Linux: Secret Service (GNOME Keyring, KWallet)</li> </ul>"},{"location":"security/best-practices/#avoid-plain-text-storage","title":"Avoid Plain Text Storage","text":"<p>Never store credentials in: - Code files - Configuration files (without encryption) - Environment files in repositories - Shared documents</p>"},{"location":"security/best-practices/#password-management","title":"\ud83d\udd11 Password Management","text":""},{"location":"security/best-practices/#regular-rotation","title":"Regular Rotation","text":"<p>Set up password expiration:</p> <pre><code>from dbcreds import CredentialManager\n\nmanager = CredentialManager()\nmanager.set_credentials(\n    \"prod\",\n    host=\"db.company.com\",\n    port=5432,\n    database=\"production\",\n    username=\"app_user\",\n    password=\"new_secure_password\",\n    password_expires_days=90  # Expire after 90 days\n)\n</code></pre> <p>Check for expiring passwords:</p> <pre><code>dbcreds check\n\n\u26a0\ufe0f  Expiring Soon:\n  - prod: 5 days remaining\n  - staging: 12 days remaining\n</code></pre>"},{"location":"security/best-practices/#strong-password-policy","title":"Strong Password Policy","text":"<ul> <li>Minimum 16 characters</li> <li>Mix of uppercase, lowercase, numbers, symbols</li> <li>Unique per environment</li> <li>No dictionary words or patterns</li> </ul>"},{"location":"security/best-practices/#access-control","title":"\ud83d\udee1\ufe0f Access Control","text":""},{"location":"security/best-practices/#principle-of-least-privilege","title":"Principle of Least Privilege","text":"<p>Create database users with minimal required permissions:</p> <pre><code>-- Read-only user for analytics\nCREATE USER analytics_reader WITH PASSWORD 'secure_password';\nGRANT CONNECT ON DATABASE production TO analytics_reader;\nGRANT USAGE ON SCHEMA public TO analytics_reader;\nGRANT SELECT ON ALL TABLES IN SCHEMA public TO analytics_reader;\n\n-- Application user with specific permissions\nCREATE USER app_user WITH PASSWORD 'secure_password';\nGRANT CONNECT ON DATABASE production TO app_user;\nGRANT USAGE ON SCHEMA public TO app_user;\nGRANT SELECT, INSERT, UPDATE, DELETE ON TABLE users, orders TO app_user;\n</code></pre>"},{"location":"security/best-practices/#environment-separation","title":"Environment Separation","text":"<pre><code># Separate credentials per environment\nenvironments = [\"dev\", \"staging\", \"prod\"]\n\nfor env in environments:\n    manager.add_environment(\n        env,\n        DatabaseType.POSTGRESQL,\n        is_production=(env == \"prod\")\n    )\n\n# Use different users per environment\n# dev_user, staging_user, prod_user\n</code></pre>"},{"location":"security/best-practices/#audit-monitoring","title":"\ud83d\udd0d Audit &amp; Monitoring","text":""},{"location":"security/best-practices/#connection-logging","title":"Connection Logging","text":"<p>Enable connection logging in production:</p> <pre><code>import logging\nfrom dbcreds import get_engine\n\n# Set up audit logging\nlogging.basicConfig(\n    filename='db_connections.log',\n    level=logging.INFO,\n    format='%(asctime)s - %(name)s - %(message)s'\n)\n\nlogger = logging.getLogger('db_audit')\n\n# Log connections\nengine = get_engine(\"prod\", echo=True)\nlogger.info(f\"Database connection established to production\")\n</code></pre>"},{"location":"security/best-practices/#failed-authentication-monitoring","title":"Failed Authentication Monitoring","text":"<p>Monitor failed authentication attempts:</p> <pre><code>-- PostgreSQL: Check failed login attempts\nSELECT \n    usename,\n    client_addr,\n    error_severity,\n    error_message,\n    timestamp\nFROM postgres_log\nWHERE error_message LIKE '%authentication failed%'\nORDER BY timestamp DESC\nLIMIT 100;\n</code></pre>"},{"location":"security/best-practices/#what-not-to-do","title":"\ud83d\udeab What NOT to Do","text":""},{"location":"security/best-practices/#dont-commit-credentials","title":"Don't Commit Credentials","text":"<pre><code># Bad: .env file with credentials\nDB_PASSWORD=mysecretpassword\n\n# Good: .env.example file\nDB_PASSWORD=your_password_here\n</code></pre> <p>Add to <code>.gitignore</code>: <pre><code>.env\n.env.local\n*.pem\n*.key\nconfig/secrets.yml\n</code></pre></p>"},{"location":"security/best-practices/#dont-share-credentials","title":"Don't Share Credentials","text":"<p>Instead of sharing passwords:</p> <pre><code># Each developer sets up their own\ndbcreds add dev --host localhost --port 5432 --database devdb --username $USER\n</code></pre>"},{"location":"security/best-practices/#dont-use-production-data-in-development","title":"Don't Use Production Data in Development","text":"<pre><code># Bad: Using production credentials in dev\nconn = get_connection_string(\"prod\")\n\n# Good: Use sanitized development data\nconn = get_connection_string(\"dev\")\n</code></pre>"},{"location":"security/best-practices/#secure-credential-rotation","title":"\ud83d\udd04 Secure Credential Rotation","text":""},{"location":"security/best-practices/#automated-rotation-script","title":"Automated Rotation Script","text":"<pre><code>import secrets\nimport string\nfrom datetime import datetime\nfrom dbcreds import CredentialManager\nimport psycopg2\nfrom psycopg2.sql import SQL, Identifier\n\ndef generate_secure_password(length=24):\n    \"\"\"Generate a cryptographically secure password.\"\"\"\n    characters = string.ascii_letters + string.digits + \"!@#$%^&amp;*\"\n    return ''.join(secrets.choice(characters) for _ in range(length))\n\ndef rotate_password(environment: str):\n    \"\"\"Rotate database password for an environment.\"\"\"\n    manager = CredentialManager()\n\n    # Get current credentials\n    old_creds = manager.get_credentials(environment)\n\n    # Generate new password\n    new_password = generate_secure_password()\n\n    # Update database password\n    admin_conn = psycopg2.connect(\n        host=old_creds.host,\n        port=old_creds.port,\n        database=\"postgres\",\n        user=\"admin_user\",\n        password=\"admin_password\"\n    )\n\n    with admin_conn.cursor() as cur:\n        cur.execute(\n            SQL(\"ALTER USER {} WITH PASSWORD %s\").format(\n                Identifier(old_creds.username)\n            ),\n            [new_password]\n        )\n\n    admin_conn.commit()\n    admin_conn.close()\n\n    # Update stored credentials\n    manager.set_credentials(\n        environment,\n        host=old_creds.host,\n        port=old_creds.port,\n        database=old_creds.database,\n        username=old_creds.username,\n        password=new_password,\n        password_expires_days=90\n    )\n\n    print(f\"\u2705 Password rotated for {environment}\")\n    print(f\"   Next rotation: 90 days\")\n\n# Rotate production password\nrotate_password(\"prod\")\n</code></pre>"},{"location":"security/best-practices/#network-security","title":"\ud83d\udd12 Network Security","text":""},{"location":"security/best-practices/#use-ssltls-connections","title":"Use SSL/TLS Connections","text":"<pre><code>from dbcreds import get_engine\n\n# Require SSL for production\nengine = get_engine(\n    \"prod\",\n    connect_args={\n        \"sslmode\": \"require\",\n        \"sslcert\": \"/path/to/client-cert.pem\",\n        \"sslkey\": \"/path/to/client-key.pem\",\n        \"sslrootcert\": \"/path/to/ca-cert.pem\"\n    }\n)\n</code></pre>"},{"location":"security/best-practices/#ip-whitelisting","title":"IP Whitelisting","text":"<p>Configure database firewall rules:</p> <pre><code>-- PostgreSQL: pg_hba.conf\n# TYPE  DATABASE  USER        ADDRESS          METHOD\nhost    all       prod_user   10.0.0.0/24     md5\nhost    all       prod_user   192.168.1.0/24  md5\nhostssl all       prod_user   0.0.0.0/0       cert\n</code></pre>"},{"location":"security/best-practices/#incident-response","title":"\ud83d\udea8 Incident Response","text":""},{"location":"security/best-practices/#if-credentials-are-compromised","title":"If Credentials Are Compromised","text":"<ol> <li> <p>Immediately rotate the password <pre><code>dbcreds update prod --password\n</code></pre></p> </li> <li> <p>Check access logs <pre><code>-- PostgreSQL: Recent connections\nSELECT \n    datname,\n    usename,\n    client_addr,\n    backend_start,\n    state\nFROM pg_stat_activity\nWHERE backend_start &gt; NOW() - INTERVAL '24 hours'\nORDER BY backend_start DESC;\n</code></pre></p> </li> <li> <p>Revoke compromised credentials <pre><code>-- Revoke access\nREVOKE CONNECT ON DATABASE production FROM compromised_user;\n\n-- Terminate existing connections\nSELECT pg_terminate_backend(pid)\nFROM pg_stat_activity\nWHERE usename = 'compromised_user';\n</code></pre></p> </li> <li> <p>Audit recent changes <pre><code>-- Check for unauthorized changes\nSELECT *\nFROM audit_log\nWHERE user_name = 'compromised_user'\n  AND timestamp &gt; NOW() - INTERVAL '7 days'\nORDER BY timestamp DESC;\n</code></pre></p> </li> </ol>"},{"location":"security/best-practices/#security-checklist","title":"\ud83d\udccb Security Checklist","text":"<ul> <li> Credentials stored in secure system store (not plain text)</li> <li> Password rotation enabled (90 days or less)</li> <li> Strong passwords (16+ characters, complex)</li> <li> Principle of least privilege for database users</li> <li> SSL/TLS enabled for connections</li> <li> IP whitelisting configured</li> <li> Audit logging enabled</li> <li> Regular security reviews scheduled</li> <li> Incident response plan documented</li> <li> No credentials in version control</li> <li> Development uses separate credentials from production</li> </ul>"}]}