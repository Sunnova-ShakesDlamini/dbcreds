{"config":{"lang":["en"],"separator":"[\\s\\-\\_\\.]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to dbcredsdbcreds","text":"<p>Professional Database Credentials Management</p>        Get Started \u2192             View Documentation"},{"location":"#secure-by-design","title":"\ud83d\udd10 Secure by Design","text":"\ud83d\udee1\ufe0f Multiple Storage Backends <p>Leverage your system's native credential store - Windows Credential Manager, macOS Keychain, or Linux Secret Service.</p> \ud83d\udd11 Never Plain Text <p>Credentials are encrypted at rest using industry-standard encryption. Your passwords never touch disk in plain text.</p> \ud83d\udd04 Password Rotation Tracking <p>Built-in password expiry tracking with notifications. Never forget to rotate credentials again.</p>"},{"location":"#quick-start","title":"\u26a1 Quick Start","text":"<pre><code># Install dbcreds\npip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n\n# Initialize and add your first environment\ndbcreds init\ndbcreds add dev --type postgresql\n\n# Use in your Python code\nfrom dbcreds import get_engine\nengine = get_engine(\"dev\")\n</code></pre>"},{"location":"#key-features","title":"\ud83c\udfaf Key Features","text":"\ud83c\udf0d Multi-Environment <p>Manage credentials for development, staging, and production environments with ease.</p> \ud83d\ude80 Rich CLI <p>Beautiful command-line interface built with Rich and Typer for a delightful developer experience.</p> \ud83c\udf10 Web Interface <p>Optional FastAPI web interface for team collaboration and visual credential management.</p> \ud83d\udcca Multi-Database <p>Support for PostgreSQL, MySQL, Oracle, SQL Server, and more.</p> \ud83d\udc0d Python First <p>Seamless integration with SQLAlchemy, pandas, and async frameworks.</p> \ud83d\udcdd Type Safe <p>Full type hints with Pydantic models for reliable, maintainable code.</p>"},{"location":"#documentation","title":"\ud83d\udcda Documentation","text":"<ul> <li>Quickstart Guide - Get up and running in 5 minutes</li> <li>CLI Reference - Complete command-line documentation</li> <li>Python API - Use dbcreds in your Python applications</li> <li>Web Interface - Set up the team collaboration interface</li> <li>API Reference - Detailed API documentation</li> </ul>"},{"location":"#installation","title":"\ud83d\udd27 Installation","text":"pipuvDevelopment <pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n</code></pre> <pre><code>uv pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n</code></pre> <pre><code>git clone https://github.com/Sunnova-ShakesDlamini/dbcreds.git\ncd dbcreds\nuv venv\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"#why-dbcreds","title":"\ud83d\udca1 Why dbcreds?","text":"<p>Stop hardcoding credentials</p> <p>No more passwords in code, environment files, or notebooks. dbcreds provides a secure,  centralized way to manage database credentials across all your projects.</p> <p>Built for teams</p> <p>With the web interface, team members can securely share access to development and staging  databases without sharing passwords directly.</p> <p>Production ready</p> <p>Used in production environments with support for password rotation policies, audit logging,  and enterprise security requirements.</p>    Made with \ud83d\udc9a by Sunnova ShakesDlamini"},{"location":"api/backends/","title":"Backends API","text":""},{"location":"api/backends/#base-backend","title":"Base Backend","text":""},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend","title":"<code>dbcreds.backends.base.CredentialBackend</code>","text":"<p>               Bases: <code>ABC</code></p> <p>Abstract base class for credential storage backends.</p> <p>All credential backends must inherit from this class and implement the required methods.</p>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>  <code>abstractmethod</code>","text":"<p>Delete a credential from storage.</p> <p>Args:     key: Unique identifier for the credential</p> <p>Returns:     True if successful, False otherwise</p> <p>Examples:     &gt;&gt;&gt; backend.delete_credential(\"dbcreds:dev\")</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef delete_credential(self, key: str) -&gt; bool:\n    \"\"\"\n    Delete a credential from storage.\n\n    Args:\n        key: Unique identifier for the credential\n\n    Returns:\n        True if successful, False otherwise\n\n    Examples:\n        &gt;&gt;&gt; backend.delete_credential(\"dbcreds:dev\")\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>  <code>abstractmethod</code>","text":"<p>Retrieve a credential from storage.</p> <p>Args:     key: Unique identifier for the credential</p> <p>Returns:     Tuple of (username, password, metadata) if found, None otherwise</p> <p>Examples:     &gt;&gt;&gt; result = backend.get_credential(\"dbcreds:dev\")     &gt;&gt;&gt; if result:     ...     username, password, metadata = result</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef get_credential(self, key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]:\n    \"\"\"\n    Retrieve a credential from storage.\n\n    Args:\n        key: Unique identifier for the credential\n\n    Returns:\n        Tuple of (username, password, metadata) if found, None otherwise\n\n    Examples:\n        &gt;&gt;&gt; result = backend.get_credential(\"dbcreds:dev\")\n        &gt;&gt;&gt; if result:\n        ...     username, password, metadata = result\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.is_available","title":"<code>is_available() -&gt; bool</code>  <code>abstractmethod</code>","text":"<p>Check if this backend is available on the current system.</p> <p>Returns:     True if the backend can be used, False otherwise</p> <p>Examples:     &gt;&gt;&gt; backend = KeyringBackend()     &gt;&gt;&gt; if backend.is_available():     ...     print(\"Keyring is available\")</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef is_available(self) -&gt; bool:\n    \"\"\"\n    Check if this backend is available on the current system.\n\n    Returns:\n        True if the backend can be used, False otherwise\n\n    Examples:\n        &gt;&gt;&gt; backend = KeyringBackend()\n        &gt;&gt;&gt; if backend.is_available():\n        ...     print(\"Keyring is available\")\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.list_credentials","title":"<code>list_credentials() -&gt; list[str]</code>","text":"<p>List all credential keys managed by this backend.</p> <p>Returns:     List of credential keys</p> <p>Note:     This is optional and may not be implemented by all backends.</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>def list_credentials(self) -&gt; list[str]:\n    \"\"\"\n    List all credential keys managed by this backend.\n\n    Returns:\n        List of credential keys\n\n    Note:\n        This is optional and may not be implemented by all backends.\n    \"\"\"\n    return []\n</code></pre>"},{"location":"api/backends/#dbcreds.backends.base.CredentialBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>  <code>abstractmethod</code>","text":"<p>Store a credential.</p> <p>Args:     key: Unique identifier for the credential     username: Username to store     password: Password to store     metadata: Additional metadata to store</p> <p>Returns:     True if successful, False otherwise</p> <p>Examples:     &gt;&gt;&gt; success = backend.set_credential(     ...     \"dbcreds:dev\",     ...     \"myuser\",     ...     \"mypass\",     ...     {\"host\": \"localhost\", \"port\": 5432}     ... )</p> Source code in <code>dbcreds\\backends\\base.py</code> <pre><code>@abstractmethod\ndef set_credential(self, key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool:\n    \"\"\"\n    Store a credential.\n\n    Args:\n        key: Unique identifier for the credential\n        username: Username to store\n        password: Password to store\n        metadata: Additional metadata to store\n\n    Returns:\n        True if successful, False otherwise\n\n    Examples:\n        &gt;&gt;&gt; success = backend.set_credential(\n        ...     \"dbcreds:dev\",\n        ...     \"myuser\",\n        ...     \"mypass\",\n        ...     {\"host\": \"localhost\", \"port\": 5432}\n        ... )\n    \"\"\"\n    pass\n</code></pre>"},{"location":"api/backends/#keyring-backend","title":"Keyring Backend","text":""},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend","title":"<code>dbcreds.backends.keyring.KeyringBackend</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Keyring-based credential storage backend.</p> <p>Uses the python-keyring library to store credentials in the system's native credential store.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential from keyring.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential from keyring.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Check if keyring is available and functional.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.list_credentials","title":"<code>list_credentials() -&gt; list[str]</code>","text":"<p>List all dbcreds keys in keyring.</p>"},{"location":"api/backends/#dbcreds.backends.keyring.KeyringBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Store credential in keyring.</p>"},{"location":"api/backends/#windows-backend","title":"Windows Backend","text":""},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend","title":"<code>dbcreds.backends.windows.WindowsCredentialBackend()</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Windows Credential Manager backend.</p> <p>Uses the Windows API to securely store credentials in the Windows Credential Manager.</p> <p>Initialize Windows API functions.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential from Windows Credential Manager.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential from Windows Credential Manager.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Check if Windows Credential Manager is available.</p>"},{"location":"api/backends/#dbcreds.backends.windows.WindowsCredentialBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Store credential in Windows Credential Manager.</p>"},{"location":"api/backends/#environment-backend","title":"Environment Backend","text":""},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend","title":"<code>dbcreds.backends.environment.EnvironmentBackend</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Environment variable credential backend.</p> <p>Reads credentials from environment variables using a naming convention. Variables should be named as: DBCREDS_{ENV}_{FIELD}</p> <p>Example:     DBCREDS_DEV_HOST=localhost     DBCREDS_DEV_PORT=5432     DBCREDS_DEV_USERNAME=myuser     DBCREDS_DEV_PASSWORD=mypass</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential from environment variables.</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential from environment variables.</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Environment variables are always available.</p>"},{"location":"api/backends/#dbcreds.backends.environment.EnvironmentBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Set credential in environment variables.</p> <p>Note: This only affects the current process and its children.</p>"},{"location":"api/backends/#config-backend","title":"Config Backend","text":""},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend","title":"<code>dbcreds.backends.config.ConfigFileBackend(config_dir: Optional[str] = None)</code>","text":"<p>               Bases: <code>CredentialBackend</code></p> <p>Configuration file backend.</p> <p>Stores environment configurations and non-sensitive metadata in JSON files. This backend should not be used for storing passwords directly.</p> <p>Initialize the config file backend.</p> <p>Args:     config_dir: Directory to store configuration files</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend-functions","title":"Functions","text":""},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.delete_credential","title":"<code>delete_credential(key: str) -&gt; bool</code>","text":"<p>Delete credential metadata from config file.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.get_credential","title":"<code>get_credential(key: str) -&gt; Optional[Tuple[str, str, Dict[str, Any]]]</code>","text":"<p>Retrieve credential metadata from config file.</p> <p>Note: This backend does not store passwords.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.is_available","title":"<code>is_available() -&gt; bool</code>","text":"<p>Check if we can write to the config directory.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.load_environments","title":"<code>load_environments() -&gt; List[Dict[str, Any]]</code>","text":"<p>Load environment configurations.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.save_environments","title":"<code>save_environments(environments: List[Dict[str, Any]]) -&gt; bool</code>","text":"<p>Save environment configurations.</p>"},{"location":"api/backends/#dbcreds.backends.config.ConfigFileBackend.set_credential","title":"<code>set_credential(key: str, username: str, password: str, metadata: Dict[str, Any]) -&gt; bool</code>","text":"<p>Store credential metadata in config file.</p> <p>Note: Password is not stored, only metadata.</p>"},{"location":"api/cli/","title":"CLI API","text":""},{"location":"api/cli/#main-cli-application","title":"Main CLI Application","text":""},{"location":"api/cli/#dbcreds.cli.app","title":"<code>dbcreds.cli.app = typer.Typer(name='dbcreds', help='Professional database credentials management', add_completion=True, rich_markup_mode='rich')</code>  <code>module-attribute</code>","text":""},{"location":"api/cli/#commands","title":"Commands","text":""},{"location":"api/cli/#dbcreds.cli.init","title":"<code>dbcreds.cli.init()</code>","text":"<p>Initialize dbcreds configuration.</p>"},{"location":"api/cli/#dbcreds.cli.add","title":"<code>dbcreds.cli.add(name: str = typer.Argument(..., help='Environment name (e.g., dev, staging, prod)'), db_type: DatabaseType = typer.Option(DatabaseType.POSTGRESQL, '--type', '-t', help='Database type', case_sensitive=False), host: Optional[str] = typer.Option(None, '--host', '-h', help='Database host'), port: Optional[int] = typer.Option(None, '--port', '-p', help='Database port'), database: Optional[str] = typer.Option(None, '--database', '-d', help='Database name'), username: Optional[str] = typer.Option(None, '--username', '-u', help='Database username'), description: Optional[str] = typer.Option(None, '--description', help='Environment description'), production: bool = typer.Option(False, '--production', help='Mark as production environment'), expires_days: int = typer.Option(90, '--expires-days', help='Password expiry in days'))</code>","text":"<p>Add a new database environment.</p>"},{"location":"api/cli/#dbcreds.cli.list","title":"<code>dbcreds.cli.list()</code>","text":"<p>List all configured environments.</p>"},{"location":"api/cli/#dbcreds.cli.show","title":"<code>dbcreds.cli.show(name: str = typer.Argument(..., help='Environment name'), show_password: bool = typer.Option(False, '--password', help='Show password'))</code>","text":"<p>Show details for a specific environment.</p>"},{"location":"api/cli/#dbcreds.cli.test","title":"<code>dbcreds.cli.test(name: str = typer.Argument(..., help='Environment name'))</code>","text":"<p>Test database connection for an environment.</p>"},{"location":"api/cli/#dbcreds.cli.remove","title":"<code>dbcreds.cli.remove(name: str = typer.Argument(..., help='Environment name'), force: bool = typer.Option(False, '--force', '-f', help='Skip confirmation'))</code>","text":"<p>Remove an environment and its credentials.</p>"},{"location":"api/cli/#dbcreds.cli.update","title":"<code>dbcreds.cli.update(name: str = typer.Argument(..., help='Environment name'), password: bool = typer.Option(False, '--password', help='Update password only'), expires_days: Optional[int] = typer.Option(None, '--expires-days', help='Update password expiry'))</code>","text":"<p>Update credentials for an environment.</p>"},{"location":"api/cli/#dbcreds.cli.check","title":"<code>dbcreds.cli.check()</code>","text":"<p>Check for expiring or expired passwords.</p>"},{"location":"api/cli/#dbcreds.cli.export","title":"<code>dbcreds.cli.export(name: str = typer.Argument(..., help='Environment name'), format: str = typer.Option('uri', '--format', '-f', help='Export format (uri, env, json)'), include_password: bool = typer.Option(True, '--include-password', help='Include password'))</code>","text":"<p>Export connection details for an environment.</p>"},{"location":"api/core/","title":"Core API","text":""},{"location":"api/core/#credentialmanager","title":"CredentialManager","text":""},{"location":"api/core/#dbcreds.core.manager.CredentialManager","title":"<code>dbcreds.core.manager.CredentialManager(config_dir: Optional[str] = None)</code>","text":"<p>Main credential management class.</p> <p>Orchestrates credential storage and retrieval across multiple backends, manages environments, and handles password expiration.</p> <p>Attributes:     config_dir: Directory for configuration files     backends: List of available credential backends     environments: Dictionary of configured environments</p> <p>Examples:     &gt;&gt;&gt; manager = CredentialManager()     &gt;&gt;&gt; manager.add_environment(\"dev\", DatabaseType.POSTGRESQL)     &gt;&gt;&gt; manager.set_credentials(\"dev\", \"localhost\", 5432, \"mydb\", \"user\", \"pass\")     &gt;&gt;&gt; creds = manager.get_credentials(\"dev\")</p> <p>Initialize the credential manager.</p> <p>Args:     config_dir: Optional custom configuration directory. Defaults to ~/.dbcreds</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager-functions","title":"Functions","text":""},{"location":"api/core/#dbcreds.core.manager.CredentialManager.add_environment","title":"<code>add_environment(name: str, database_type: DatabaseType, description: Optional[str] = None, is_production: bool = False) -&gt; Environment</code>","text":"<p>Add a new environment configuration.</p> <p>Args:     name: Environment name (e.g., 'dev', 'prod')     database_type: Type of database     description: Optional description     is_production: Whether this is a production environment</p> <p>Returns:     Created Environment object</p> <p>Raises:     CredentialError: If environment already exists</p> <p>Examples:     &gt;&gt;&gt; manager.add_environment(\"dev\", DatabaseType.POSTGRESQL, \"Development database\")</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.get_credentials","title":"<code>get_credentials(environment: str, check_expiry: bool = True) -&gt; DatabaseCredentials</code>","text":"<p>Retrieve credentials for an environment.</p> <p>Args:     environment: Environment name     check_expiry: Whether to check for password expiration</p> <p>Returns:     DatabaseCredentials object</p> <p>Raises:     CredentialNotFoundError: If credentials not found     PasswordExpiredError: If password has expired</p> <p>Examples:     &gt;&gt;&gt; creds = manager.get_credentials(\"dev\")     &gt;&gt;&gt; print(creds.host, creds.port)</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.list_environments","title":"<code>list_environments() -&gt; List[Environment]</code>","text":"<p>List all configured environments.</p> <p>Returns:     List of Environment objects</p> <p>Examples:     &gt;&gt;&gt; envs = manager.list_environments()     &gt;&gt;&gt; for env in envs:     ...     print(env.name, env.database_type)</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.remove_environment","title":"<code>remove_environment(name: str) -&gt; None</code>","text":"<p>Remove an environment and its credentials.</p> <p>Args:     name: Environment name to remove</p> <p>Raises:     CredentialNotFoundError: If environment doesn't exist</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.set_credentials","title":"<code>set_credentials(environment: str, host: str, port: int, database: str, username: str, password: str, password_expires_days: Optional[int] = 90, **options) -&gt; DatabaseCredentials</code>","text":"<p>Store credentials for an environment.</p> <p>Args:     environment: Environment name     host: Database host     port: Database port     database: Database name     username: Database username     password: Database password     password_expires_days: Days until password expires (None for no expiry)     **options: Additional connection options</p> <p>Returns:     Created DatabaseCredentials object</p> <p>Raises:     CredentialNotFoundError: If environment doesn't exist</p> <p>Examples:     &gt;&gt;&gt; manager.set_credentials(\"dev\", \"localhost\", 5432, \"mydb\", \"user\", \"pass\")</p>"},{"location":"api/core/#dbcreds.core.manager.CredentialManager.test_connection","title":"<code>test_connection(environment: str) -&gt; bool</code>","text":"<p>Test database connection for an environment.</p> <p>Args:     environment: Environment name</p> <p>Returns:     True if connection successful, False otherwise</p> <p>Examples:     &gt;&gt;&gt; if manager.test_connection(\"dev\"):     ...     print(\"Connection successful!\")</p>"},{"location":"api/core/#models","title":"Models","text":""},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials","title":"<code>dbcreds.core.models.DatabaseCredentials</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Database connection credentials.</p> <p>Secure storage model for database connection information.</p> <p>Attributes:     environment: Environment name     host: Database server hostname or IP     port: Database server port     database: Database name     username: Database username     password: Database password (stored securely)     options: Additional connection options     ssl_mode: SSL connection mode     password_updated_at: When the password was last updated     password_expires_at: When the password expires</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials-functions","title":"Functions","text":""},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.days_until_expiry","title":"<code>days_until_expiry() -&gt; Optional[int]</code>","text":"<p>Get the number of days until password expiry.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.ensure_timezone_aware","title":"<code>ensure_timezone_aware(v)</code>  <code>classmethod</code>","text":"<p>Ensure datetime fields are timezone-aware.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.get_connection_string","title":"<code>get_connection_string(include_password: bool = True, driver: Optional[str] = None) -&gt; str</code>","text":"<p>Generate a connection string for the database.</p> <p>Args:     include_password: Whether to include the password in the connection string     driver: Optional driver override for the connection string</p> <p>Returns:     Database connection URI</p> <p>Examples:     &gt;&gt;&gt; creds.get_connection_string()     'postgresql://user:pass@localhost:5432/mydb'     &gt;&gt;&gt; creds.get_connection_string(include_password=False)     'postgresql://user@localhost:5432/mydb'</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.is_password_expired","title":"<code>is_password_expired() -&gt; bool</code>","text":"<p>Check if the password has expired.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseCredentials.validate_port","title":"<code>validate_port(v: int, info) -&gt; int</code>  <code>classmethod</code>","text":"<p>Set default port based on database type if not specified.</p>"},{"location":"api/core/#dbcreds.core.models.Environment","title":"<code>dbcreds.core.models.Environment</code>","text":"<p>               Bases: <code>BaseModel</code></p> <p>Database environment configuration.</p> <p>Represents a named database environment (e.g., dev, staging, prod) with its associated settings.</p> <p>Attributes:     name: Environment name (e.g., 'dev', 'prod')     database_type: Type of database     description: Optional description of the environment     is_production: Whether this is a production environment     created_at: When the environment was created     updated_at: When the environment was last updated</p>"},{"location":"api/core/#dbcreds.core.models.Environment-functions","title":"Functions","text":""},{"location":"api/core/#dbcreds.core.models.Environment.ensure_timezone_aware","title":"<code>ensure_timezone_aware(v)</code>  <code>classmethod</code>","text":"<p>Ensure datetime fields are timezone-aware.</p>"},{"location":"api/core/#dbcreds.core.models.Environment.validate_name","title":"<code>validate_name(v: str) -&gt; str</code>  <code>classmethod</code>","text":"<p>Validate environment name.</p>"},{"location":"api/core/#dbcreds.core.models.DatabaseType","title":"<code>dbcreds.core.models.DatabaseType</code>","text":"<p>               Bases: <code>str</code>, <code>Enum</code></p> <p>Supported database types.</p>"},{"location":"api/core/#exceptions","title":"Exceptions","text":""},{"location":"api/core/#dbcreds.core.exceptions","title":"<code>dbcreds.core.exceptions</code>","text":"<p>Custom exceptions for dbcreds.</p> <p>This module defines all custom exceptions used throughout the package.</p>"},{"location":"api/core/#dbcreds.core.exceptions-classes","title":"Classes","text":""},{"location":"api/core/#dbcreds.core.exceptions.BackendError","title":"<code>BackendError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when a backend operation fails.</p>"},{"location":"api/core/#dbcreds.core.exceptions.CredentialError","title":"<code>CredentialError</code>","text":"<p>               Bases: <code>Exception</code></p> <p>Base exception for all credential-related errors.</p>"},{"location":"api/core/#dbcreds.core.exceptions.CredentialNotFoundError","title":"<code>CredentialNotFoundError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when requested credentials are not found.</p>"},{"location":"api/core/#dbcreds.core.exceptions.PasswordExpiredError","title":"<code>PasswordExpiredError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when a password has expired.</p>"},{"location":"api/core/#dbcreds.core.exceptions.ValidationError","title":"<code>ValidationError</code>","text":"<p>               Bases: <code>CredentialError</code></p> <p>Raised when credential validation fails.</p>"},{"location":"api/web/","title":"Web API","text":""},{"location":"api/web/#fastapi-application","title":"FastAPI Application","text":""},{"location":"api/web/#dbcreds.web.main.app","title":"<code>dbcreds.web.main.app = FastAPI(title='dbcreds Web', description='Database Credentials Management', version=__version__, lifespan=lifespan)</code>  <code>module-attribute</code>","text":""},{"location":"api/web/#routes","title":"Routes","text":""},{"location":"api/web/#dbcreds.web.main","title":"<code>dbcreds.web.main</code>","text":"<p>FastAPI web application for dbcreds.</p> <p>Provides a web interface for managing database credentials with team collaboration features.</p>"},{"location":"api/web/#dbcreds.web.main-functions","title":"Functions","text":""},{"location":"api/web/#dbcreds.web.main.index","title":"<code>index(request: Request)</code>  <code>async</code>","text":"<p>Home page.</p>"},{"location":"api/web/#dbcreds.web.main.create_environment","title":"<code>create_environment(request: Request)</code>  <code>async</code>","text":"<p>Create a new environment.</p>"},{"location":"api/web/#dbcreds.web.main.list_environments","title":"<code>list_environments(request: Request)</code>  <code>async</code>","text":"<p>List all environments (HTMX endpoint).</p>"},{"location":"api/web/#dbcreds.web.main.edit_environment_form","title":"<code>edit_environment_form(request: Request, env_name: str)</code>  <code>async</code>","text":"<p>Get edit form for an environment.</p>"},{"location":"api/web/#dbcreds.web.main.update_environment","title":"<code>update_environment(request: Request, env_name: str)</code>  <code>async</code>","text":"<p>Update an environment.</p>"},{"location":"api/web/#dbcreds.web.main.test_environment","title":"<code>test_environment(request: Request, env_name: str)</code>  <code>async</code>","text":"<p>Test environment connection.</p>"},{"location":"api/web/#dbcreds.web.main.get_environment_expiry","title":"<code>get_environment_expiry(env_name: str)</code>  <code>async</code>","text":"<p>Get password expiry information for an environment.</p>"},{"location":"api/web/#authentication","title":"Authentication","text":""},{"location":"api/web/#dbcreds.web.auth","title":"<code>dbcreds.web.auth</code>","text":"<p>Authentication for the web interface.</p>"},{"location":"api/web/#dbcreds.web.auth-functions","title":"Functions","text":""},{"location":"api/web/#dbcreds.web.auth.get_current_user","title":"<code>get_current_user(credentials: HTTPBasicCredentials = Depends(security))</code>  <code>async</code>","text":"<p>Get the current authenticated user.</p>"},{"location":"api/web/#dbcreds.web.auth.authenticate_user","title":"<code>authenticate_user(username: str, password: str) -&gt; bool</code>","text":"<p>Authenticate a user.</p>"},{"location":"api/web/#error-handling","title":"Error Handling","text":""},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler","title":"<code>dbcreds.web.errors.WebErrorHandler()</code>","text":"<p>Rich error handler for web interface.</p> <p>Initialize with a console for stderr output.</p>"},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler-functions","title":"Functions","text":""},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler.get_error_response","title":"<code>get_error_response(request: Request, error: Exception, status_code: int = status.HTTP_500_INTERNAL_SERVER_ERROR) -&gt; HTMLResponse</code>","text":"<p>Get HTML error response for the web interface.</p>"},{"location":"api/web/#dbcreds.web.errors.WebErrorHandler.log_error","title":"<code>log_error(error: Exception, request: Optional[Request] = None) -&gt; None</code>","text":"<p>Log error with rich formatting to console.</p>"},{"location":"examples/async/","title":"Async Examples","text":""},{"location":"examples/async/#asyncio-support","title":"AsyncIO Support","text":"<pre><code>import asyncio\nfrom dbcreds import get_async_engine\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nasync def fetch_data():\n    engine = await get_async_engine(\"dev\")\n\n    async with AsyncSession(engine) as session:\n        result = await session.execute(\"SELECT * FROM users\")\n        return result.fetchall()\n\n# Run async function\ndata = asyncio.run(fetch_data())\n</code></pre>"},{"location":"examples/async/#async-context-manager","title":"Async Context Manager","text":"<pre><code>async def process_data():\n    engine = await get_async_engine(\"dev\")\n\n    async with engine.connect() as conn:\n        result = await conn.execute(\"SELECT COUNT(*) FROM orders\")\n        count = result.scalar()\n        return count\n</code></pre>"},{"location":"examples/basic/","title":"Basic Usage Examples","text":"<p>Here are common ways to use dbcreds in your Python scripts.</p>"},{"location":"examples/basic/#simple-connection","title":"Simple Connection","text":"<pre><code>from dbcreds import get_connection\n\n# Get a database connection\nwith get_connection(\"production\") as conn:\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT COUNT(*) FROM users\")\n    count = cursor.fetchone()[0]\n    print(f\"Total users: {count}\")\n</code></pre>"},{"location":"examples/basic/#using-connection-strings","title":"Using Connection Strings","text":"<pre><code>from dbcreds import get_connection_string\nimport psycopg2\n\n# Get connection string\nconn_string = get_connection_string(\"production\")\nprint(f\"Connection string: {conn_string}\")\n\n# Use with psycopg2 directly\nconn = psycopg2.connect(conn_string)\n</code></pre>"},{"location":"examples/basic/#error-handling","title":"Error Handling","text":"<pre><code>from dbcreds import get_credentials\nfrom dbcreds.core.exceptions import (\n    CredentialNotFoundError, \n    PasswordExpiredError\n)\n\ntry:\n    creds = get_credentials(\"staging\")\n    print(f\"Connecting to {creds.host}:{creds.port}\")\nexcept CredentialNotFoundError:\n    print(\"Environment not found! Run: dbcreds add staging\")\nexcept PasswordExpiredError:\n    print(\"Password expired! Run: dbcreds update staging --password\")\n</code></pre>"},{"location":"examples/basic/#getting-credential-details","title":"Getting Credential Details","text":"<pre><code>from dbcreds import get_credentials\n\n# Get credentials object\ncreds = get_credentials(\"dev\")\n\n# Access individual components\nprint(f\"Host: {creds.host}\")\nprint(f\"Port: {creds.port}\")\nprint(f\"Database: {creds.database}\")\nprint(f\"Username: {creds.username}\")\nprint(f\"Days until expiry: {creds.days_until_expiry()}\")\n\n# Get password (be careful with this!)\npassword = creds.password.get_secret_value()\n</code></pre>"},{"location":"examples/basic/#multiple-environments","title":"Multiple Environments","text":"<pre><code>from dbcreds import get_engine\n\n# Define your environments\nenvironments = [\"dev\", \"staging\", \"prod\"]\n\n# Connect to each environment\nfor env in environments:\n    try:\n        engine = get_engine(env)\n        with engine.connect() as conn:\n            result = conn.execute(\"SELECT version()\")\n            version = result.scalar()\n            print(f\"{env}: {version}\")\n    except Exception as e:\n        print(f\"{env}: Failed - {e}\")\n</code></pre>"},{"location":"examples/basic/#environment-based-configuration","title":"Environment-Based Configuration","text":"<pre><code>import os\nfrom dbcreds import get_engine\n\n# Use environment variable to determine which DB to connect to\nenv = os.getenv(\"APP_ENV\", \"dev\")\nengine = get_engine(env)\n\nprint(f\"Connected to {env} database\")\n</code></pre>"},{"location":"examples/pandas/","title":"Pandas Examples","text":""},{"location":"examples/pandas/#reading-data","title":"Reading Data","text":"<pre><code>import pandas as pd\nfrom dbcreds import get_connection, get_engine\n\n# Using connection\nwith get_connection(\"dev\") as conn:\n    df = pd.read_sql(\"SELECT * FROM sales\", conn)\n\n# Using engine (recommended)\nengine = get_engine(\"dev\")\ndf = pd.read_sql_table(\"sales\", engine)\n</code></pre>"},{"location":"examples/pandas/#writing-data","title":"Writing Data","text":"<pre><code># Write DataFrame to database\ndf.to_sql(\"sales_backup\", engine, if_exists=\"replace\", index=False)\n</code></pre>"},{"location":"examples/pandas/#large-datasets","title":"Large Datasets","text":"<pre><code># Read in chunks\nfor chunk in pd.read_sql(\"SELECT * FROM large_table\", \n                         engine, chunksize=10000):\n    process(chunk)\n</code></pre>"},{"location":"examples/sqlalchemy/","title":"SQLAlchemy Examples","text":""},{"location":"examples/sqlalchemy/#basic-usage","title":"Basic Usage","text":"<pre><code>from dbcreds import get_engine\nimport pandas as pd\n\n# Get engine for environment\nengine = get_engine(\"dev\")\n\n# Use with pandas\ndf = pd.read_sql(\"SELECT * FROM users LIMIT 10\", engine)\n\n# Use with SQLAlchemy ORM\nfrom sqlalchemy.orm import Session\n\nwith Session(engine) as session:\n    result = session.execute(\"SELECT 1\")\n</code></pre>"},{"location":"examples/sqlalchemy/#async-support","title":"Async Support","text":"<pre><code>from dbcreds import get_async_engine\nfrom sqlalchemy.ext.asyncio import AsyncSession\n\nengine = await get_async_engine(\"dev\")\n\nasync with AsyncSession(engine) as session:\n    result = await session.execute(\"SELECT 1\")\n</code></pre>"},{"location":"getting-started/configuration/","title":"Configuration","text":""},{"location":"getting-started/configuration/#configuration-directory","title":"Configuration Directory","text":"<p>dbcreds stores its configuration in <code>~/.dbcreds/</code> by default.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can override the configuration directory:</p> <pre><code>export DBCREDS_CONFIG_DIR=/path/to/config\n</code></pre>"},{"location":"getting-started/configuration/#backend-configuration","title":"Backend Configuration","text":"<p>dbcreds automatically detects available backends. See Backends for details.</p>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#requirements","title":"Requirements","text":"<ul> <li>Python 3.8+</li> <li>pip or uv</li> </ul>"},{"location":"getting-started/installation/#install-from-github","title":"Install from GitHub","text":"<pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds\n</code></pre>"},{"location":"getting-started/installation/#install-with-extras","title":"Install with extras","text":"<pre><code># PostgreSQL only (default)\npip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds\n\n# With MySQL support\npip install \"git+https://github.com/Sunnova-ShakesDlamini/dbcreds#egg=dbcreds[mysql]\"\n\n# With all databases\npip install \"git+https://github.com/Sunnova-ShakesDlamini/dbcreds#egg=dbcreds[mysql,oracle,mssql]\"\n</code></pre>"},{"location":"getting-started/installation/#development-installation","title":"Development Installation","text":"<pre><code>git clone https://github.com/Sunnova-ShakesDlamini/dbcreds\ncd dbcreds\nuv venv\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>Get started with dbcreds in just a few minutes!</p>"},{"location":"getting-started/quickstart/#installation","title":"Installation","text":"<pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds\n</code></pre>"},{"location":"getting-started/quickstart/#initialize-dbcreds","title":"Initialize dbcreds","text":"<pre><code>dbcreds init\n</code></pre> <p>This creates the configuration directory and checks available backends.</p>"},{"location":"getting-started/quickstart/#add-your-first-environment","title":"Add Your First Environment","text":"<pre><code>dbcreds add dev --type postgresql\n</code></pre> <p>You'll be prompted for: - Database host - Port (defaults to 5432 for PostgreSQL) - Database name - Username - Password</p>"},{"location":"getting-started/quickstart/#use-in-python","title":"Use in Python","text":"<pre><code>from dbcreds import get_connection\nimport pandas as pd\n\n# Get a connection\nwith get_connection(\"dev\") as conn:\n    df = pd.read_sql(\"SELECT * FROM my_table LIMIT 10\", conn)\n    print(df.head())\n</code></pre>"},{"location":"getting-started/quickstart/#using-with-sqlalchemy","title":"Using with SQLAlchemy","text":"<pre><code>from dbcreds import get_engine\nfrom sqlalchemy.orm import sessionmaker\n\n# Get an engine\nengine = get_engine(\"dev\")\n\n# Create a session\nSession = sessionmaker(bind=engine)\nsession = Session()\n\n# Use the session\nresults = session.execute(\"SELECT 1\")\nprint(results.scalar())\n</code></pre>"},{"location":"getting-started/quickstart/#check-password-expiry","title":"Check Password Expiry","text":"<pre><code>dbcreds check\n</code></pre> <p>This shows you which passwords are expired or expiring soon.</p>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about different backends</li> <li>Set up the web interface</li> <li>Configure password rotation</li> </ul>"},{"location":"guide/backends/","title":"Storage Backends","text":"<p>dbcreds supports multiple credential storage backends.</p>"},{"location":"guide/backends/#available-backends","title":"Available Backends","text":""},{"location":"guide/backends/#keyring-backend","title":"Keyring Backend","text":"<p>Cross-platform using system credential stores.</p>"},{"location":"guide/backends/#windows-credential-manager","title":"Windows Credential Manager","text":"<p>Native Windows credential storage.</p>"},{"location":"guide/backends/#environment-variables","title":"Environment Variables","text":"<p>Read credentials from environment.</p>"},{"location":"guide/backends/#config-file","title":"Config File","text":"<p>JSON file storage (metadata only).</p>"},{"location":"guide/backends/#backend-priority","title":"Backend Priority","text":"<p>Backends are tried in order of security and availability.</p> <p>See Backend API for implementation details.</p>"},{"location":"guide/cli/","title":"CLI Reference","text":"<p>The <code>dbcreds</code> command provides a rich CLI for managing credentials.</p>"},{"location":"guide/cli/#commands","title":"Commands","text":""},{"location":"guide/cli/#dbcreds.cli","title":"<code>dbcreds.cli</code>","text":"<p>Command-line interface for dbcreds.</p> <p>This module provides a rich, user-friendly CLI for managing database credentials using Typer and Rich.</p>"},{"location":"guide/cli/#usage-examples","title":"Usage Examples","text":""},{"location":"guide/cli/#initialize","title":"Initialize","text":"<pre><code>dbcreds init\n</code></pre>"},{"location":"guide/cli/#add-environment","title":"Add Environment","text":"<pre><code>dbcreds add dev --type postgresql\n</code></pre>"},{"location":"guide/cli/#list-environments","title":"List Environments","text":"<pre><code>dbcreds list\n</code></pre>"},{"location":"guide/cli/#show-details","title":"Show Details","text":"<pre><code>dbcreds show dev\n</code></pre>"},{"location":"guide/cli/#test-connection","title":"Test Connection","text":"<pre><code>dbcreds test dev\n</code></pre>"},{"location":"guide/cli/#check-expiry","title":"Check Expiry","text":"<pre><code>dbcreds check\n</code></pre>"},{"location":"guide/migration/","title":"Migration Guide","text":""},{"location":"guide/migration/#from-powershell-profile","title":"From PowerShell Profile","text":"<p>If you have existing credentials in PowerShell, use the migration tool:</p> <pre><code>dbcreds-migrate --name dev\n</code></pre> <p>This will import credentials from: - Environment variables (<code>DB_SERVER</code>, <code>DB_PORT</code>, etc.) - Windows Credential Manager - JSON config at <code>~/.db_credentials/config.json</code></p>"},{"location":"guide/migration/#manual-migration","title":"Manual Migration","text":""},{"location":"guide/migration/#dbcreds.migrate","title":"<code>dbcreds.migrate</code>","text":"<p>Migration script for importing existing PowerShell credentials into dbcreds.</p>"},{"location":"guide/migration/#dbcreds.migrate-classes","title":"Classes","text":""},{"location":"guide/migration/#dbcreds.migrate-functions","title":"Functions","text":""},{"location":"guide/migration/#dbcreds.migrate.detect_database_type","title":"<code>detect_database_type(port: int, server: str = '') -&gt; DatabaseType</code>","text":"<p>Detect database type from port or server name.</p>"},{"location":"guide/migration/#dbcreds.migrate.main","title":"<code>main(env_name: str = typer.Option('default', '--name', '-n', help='Environment name for dbcreds'), force: bool = typer.Option(False, '--force', '-f', help='Overwrite if exists'))</code>","text":"<p>Import credentials from PowerShell environment variables.</p>"},{"location":"guide/python-api/","title":"Python API","text":""},{"location":"guide/python-api/#quick-start","title":"Quick Start","text":"<pre><code>from dbcreds import get_connection, get_engine\n\n# Get a connection\nwith get_connection(\"dev\") as conn:\n    cursor = conn.cursor()\n    cursor.execute(\"SELECT 1\")\n\n# Get SQLAlchemy engine\nengine = get_engine(\"dev\")\n</code></pre>"},{"location":"guide/python-api/#shortcut-functions","title":"Shortcut Functions","text":""},{"location":"guide/python-api/#dbcreds.utils.shortcuts","title":"<code>dbcreds.utils.shortcuts</code>","text":"<p>Convenience functions for common dbcreds operations.</p> <p>This module provides simple shortcuts for the most common use cases, making it easy to get started with dbcreds.</p>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts-classes","title":"Classes","text":""},{"location":"guide/python-api/#dbcreds.utils.shortcuts-functions","title":"Functions","text":""},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_async_engine","title":"<code>get_async_engine(environment: str = 'default', **kwargs) -&gt; AsyncEngine</code>  <code>async</code>","text":"<p>Get an async SQLAlchemy engine for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     **kwargs: Additional engine parameters</p> <p>Returns:     SQLAlchemy AsyncEngine object</p> <p>Examples:     &gt;&gt;&gt; engine = await get_async_engine(\"dev\")     &gt;&gt;&gt; async with engine.connect() as conn:     ...     result = await conn.execute(\"SELECT 1\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>async def get_async_engine(environment: str = \"default\", **kwargs) -&gt; AsyncEngine:\n    \"\"\"\n    Get an async SQLAlchemy engine for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        **kwargs: Additional engine parameters\n\n    Returns:\n        SQLAlchemy AsyncEngine object\n\n    Examples:\n        &gt;&gt;&gt; engine = await get_async_engine(\"dev\")\n        &gt;&gt;&gt; async with engine.connect() as conn:\n        ...     result = await conn.execute(\"SELECT 1\")\n    \"\"\"\n    manager = _get_manager()\n    creds = manager.get_credentials(environment)\n    env = manager.environments.get(environment.lower())\n\n    if not env:\n        raise CredentialError(f\"Environment '{environment}' not found\")\n\n    # Build async connection string\n    if env.database_type == DatabaseType.POSTGRESQL:\n        driver = \"postgresql+asyncpg\"\n    elif env.database_type == DatabaseType.MYSQL:\n        driver = \"mysql+aiomysql\"\n    else:\n        raise NotImplementedError(f\"Async support for {env.database_type} not yet implemented\")\n\n    conn_string = f\"{driver}://{creds.username}:{creds.password.get_secret_value()}@{creds.host}:{creds.port}/{creds.database}\"\n    return create_async_engine(conn_string, **kwargs)\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_connection","title":"<code>get_connection(environment: str = 'default', **kwargs)</code>","text":"<p>Get a database connection for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     **kwargs: Additional connection parameters</p> <p>Yields:     Database connection object</p> <p>Examples:     &gt;&gt;&gt; with get_connection(\"dev\") as conn:     ...     cursor = conn.cursor()     ...     cursor.execute(\"SELECT 1\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>@contextmanager\ndef get_connection(environment: str = \"default\", **kwargs):\n    \"\"\"\n    Get a database connection for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        **kwargs: Additional connection parameters\n\n    Yields:\n        Database connection object\n\n    Examples:\n        &gt;&gt;&gt; with get_connection(\"dev\") as conn:\n        ...     cursor = conn.cursor()\n        ...     cursor.execute(\"SELECT 1\")\n    \"\"\"\n    manager = _get_manager()\n    creds = manager.get_credentials(environment)\n    env = manager.environments.get(environment.lower())\n\n    if not env:\n        raise CredentialError(f\"Environment '{environment}' not found\")\n\n    # Get appropriate connection based on database type\n    if env.database_type == DatabaseType.POSTGRESQL:\n        import psycopg2\n\n        conn_params = {\n            \"host\": creds.host,\n            \"port\": creds.port,\n            \"database\": creds.database,\n            \"user\": creds.username,\n            \"password\": creds.password.get_secret_value(),\n            **kwargs,\n        }\n        conn = psycopg2.connect(**conn_params)\n        try:\n            yield conn\n        finally:\n            conn.close()\n\n    elif env.database_type == DatabaseType.MYSQL:\n        import MySQLdb\n\n        conn_params = {\n            \"host\": creds.host,\n            \"port\": creds.port,\n            \"db\": creds.database,\n            \"user\": creds.username,\n            \"passwd\": creds.password.get_secret_value(),\n            **kwargs,\n        }\n        conn = MySQLdb.connect(**conn_params)\n        try:\n            yield conn\n        finally:\n            conn.close()\n\n    else:\n        raise NotImplementedError(f\"Database type {env.database_type} not yet implemented\")\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_connection_string","title":"<code>get_connection_string(environment: str = 'default', include_password: bool = True) -&gt; str</code>","text":"<p>Get a database connection string for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     include_password: Whether to include password in the string</p> <p>Returns:     Database connection URI</p> <p>Examples:     &gt;&gt;&gt; uri = get_connection_string(\"dev\")     &gt;&gt;&gt; print(uri)     'postgresql://user:pass@localhost:5432/mydb'</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>def get_connection_string(environment: str = \"default\", include_password: bool = True) -&gt; str:\n    \"\"\"\n    Get a database connection string for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        include_password: Whether to include password in the string\n\n    Returns:\n        Database connection URI\n\n    Examples:\n        &gt;&gt;&gt; uri = get_connection_string(\"dev\")\n        &gt;&gt;&gt; print(uri)\n        'postgresql://user:pass@localhost:5432/mydb'\n    \"\"\"\n    creds = get_credentials(environment)\n    return creds.get_connection_string(include_password=include_password)\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_connection_string_fast","title":"<code>get_connection_string_fast(environment: str = 'default') -&gt; str</code>","text":"<p>Get database connection string using fast, marimo-friendly method.</p> <p>This function bypasses the normal credential manager initialization and directly reads from environment variables or Windows Credential Manager. This is optimized for use in marimo notebooks where the standard import can cause hanging issues.</p> <p>Args:     environment: Environment name (default: \"default\")</p> <p>Returns:     Database connection URI</p> <p>Raises:     CredentialError: If credentials not found</p> <p>Examples:     &gt;&gt;&gt; # In a marimo notebook     &gt;&gt;&gt; from dbcreds import get_connection_string_fast     &gt;&gt;&gt; conn_string = get_connection_string_fast(\"fusionods\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>def get_connection_string_fast(environment: str = \"default\") -&gt; str:\n    \"\"\"\n    Get database connection string using fast, marimo-friendly method.\n\n    This function bypasses the normal credential manager initialization\n    and directly reads from environment variables or Windows Credential Manager.\n    This is optimized for use in marimo notebooks where the standard import\n    can cause hanging issues.\n\n    Args:\n        environment: Environment name (default: \"default\")\n\n    Returns:\n        Database connection URI\n\n    Raises:\n        CredentialError: If credentials not found\n\n    Examples:\n        &gt;&gt;&gt; # In a marimo notebook\n        &gt;&gt;&gt; from dbcreds import get_connection_string_fast\n        &gt;&gt;&gt; conn_string = get_connection_string_fast(\"fusionods\")\n    \"\"\"\n    # Check environment variables first\n    conn_string = _get_from_environment(environment)\n    if conn_string:\n        return conn_string\n\n    # Fall back to Windows Credential Manager\n    if os.name == 'nt':\n        conn_string = _get_from_windows_credential_manager(environment)\n        if conn_string:\n            return conn_string\n\n    raise CredentialError(\n        f\"No credentials found for environment '{environment}'. \"\n        \"Please ensure credentials are set in environment variables or Windows Credential Manager.\"\n    )\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_credentials","title":"<code>get_credentials(environment: str = 'default') -&gt; DatabaseCredentials</code>","text":"<p>Get database credentials for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")</p> <p>Returns:     DatabaseCredentials object</p> <p>Examples:     &gt;&gt;&gt; creds = get_credentials(\"dev\")     &gt;&gt;&gt; print(f\"Connecting to {creds.host}:{creds.port}\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>def get_credentials(environment: str = \"default\") -&gt; DatabaseCredentials:\n    \"\"\"\n    Get database credentials for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n\n    Returns:\n        DatabaseCredentials object\n\n    Examples:\n        &gt;&gt;&gt; creds = get_credentials(\"dev\")\n        &gt;&gt;&gt; print(f\"Connecting to {creds.host}:{creds.port}\")\n    \"\"\"\n    manager = _get_manager()\n    return manager.get_credentials(environment)\n</code></pre>"},{"location":"guide/python-api/#dbcreds.utils.shortcuts.get_engine","title":"<code>get_engine(environment: str = 'default', **kwargs) -&gt; Engine</code>","text":"<p>Get a SQLAlchemy engine for an environment.</p> <p>Args:     environment: Environment name (default: \"default\")     **kwargs: Additional engine parameters</p> <p>Returns:     SQLAlchemy Engine object</p> <p>Examples:     &gt;&gt;&gt; engine = get_engine(\"dev\")     &gt;&gt;&gt; with engine.connect() as conn:     ...     result = conn.execute(\"SELECT 1\")</p> Source code in <code>dbcreds\\utils\\shortcuts.py</code> <pre><code>def get_engine(environment: str = \"default\", **kwargs) -&gt; Engine:\n    \"\"\"\n    Get a SQLAlchemy engine for an environment.\n\n    Args:\n        environment: Environment name (default: \"default\")\n        **kwargs: Additional engine parameters\n\n    Returns:\n        SQLAlchemy Engine object\n\n    Examples:\n        &gt;&gt;&gt; engine = get_engine(\"dev\")\n        &gt;&gt;&gt; with engine.connect() as conn:\n        ...     result = conn.execute(\"SELECT 1\")\n    \"\"\"\n    conn_string = get_connection_string(environment)\n    return create_engine(conn_string, **kwargs)\n</code></pre>"},{"location":"guide/python-api/#core-classes","title":"Core Classes","text":"<p>See API Reference for detailed class documentation.</p>"},{"location":"guide/rotation/","title":"Password Rotation","text":""},{"location":"guide/rotation/#automatic-expiry-tracking","title":"Automatic Expiry Tracking","text":"<p>dbcreds tracks password age and expiry:</p> <pre><code>from dbcreds import get_credentials\n\ncreds = get_credentials(\"dev\")\ndays_left = creds.days_until_expiry()\nif creds.is_password_expired():\n    print(\"Password expired!\")\n</code></pre>"},{"location":"guide/rotation/#setting-expiry","title":"Setting Expiry","text":"<pre><code># Set 90-day expiry\ndbcreds add dev --expires-days 90\n\n# Update expiry\ndbcreds update dev --expires-days 180\n</code></pre>"},{"location":"guide/rotation/#checking-status","title":"Checking Status","text":"<pre><code># Check all environments\ndbcreds check\n</code></pre>"},{"location":"guide/web-interface/","title":"Web Interface","text":""},{"location":"guide/web-interface/#starting-the-server","title":"Starting the Server","text":"<pre><code>dbcreds-server\n</code></pre> <p>Visit http://localhost:8000</p>"},{"location":"guide/web-interface/#features","title":"Features","text":"<ul> <li>Visual credential management</li> <li>Password expiry tracking</li> <li>Team collaboration</li> <li>Secure authentication</li> </ul>"},{"location":"guide/web-interface/#configuration","title":"Configuration","text":"<p>The web interface uses FastAPI and HTMX for a modern, responsive UI.</p>"},{"location":"guide/web-interface/#api-endpoints","title":"API Endpoints","text":""},{"location":"guide/web-interface/#dbcreds.web.main","title":"<code>dbcreds.web.main</code>","text":"<p>FastAPI web application for dbcreds.</p> <p>Provides a web interface for managing database credentials with team collaboration features.</p>"},{"location":"guide/web-interface/#dbcreds.web.main-attributes","title":"Attributes","text":""},{"location":"guide/web-interface/#dbcreds.web.main.app","title":"<code>app = FastAPI(title='dbcreds Web', description='Database Credentials Management', version=__version__, lifespan=lifespan)</code>  <code>module-attribute</code>","text":""},{"location":"guide/web-interface/#dbcreds.web.main-functions","title":"Functions","text":""},{"location":"guide/web-interface/#dbcreds.web.main.index","title":"<code>index(request: Request)</code>  <code>async</code>","text":"<p>Home page.</p>"},{"location":"guide/web-interface/#dbcreds.web.main.create_environment","title":"<code>create_environment(request: Request)</code>  <code>async</code>","text":"<p>Create a new environment.</p>"},{"location":"guide/web-interface/#dbcreds.web.main.list_environments","title":"<code>list_environments(request: Request)</code>  <code>async</code>","text":"<p>List all environments (HTMX endpoint).</p>"},{"location":"includes/cli-examples/","title":"Cli examples","text":"<pre><code># List all environments\ndbcreds list\n\n# Show specific environment (without password)\ndbcreds show dev\n\n# Test connection\ndbcreds test dev\n\n# Update password\ndbcreds update dev --password\n\n# Remove environment\ndbcreds remove dev\n\n# Check password expiry\ndbcreds check\n\n# Export connection string\ndbcreds export dev --format uri\n</code></pre>"},{"location":"includes/development/","title":"Development","text":"<pre><code># Clone the repository\ngit clone https://github.com/Sunnova-ShakesDlamini/dbcreds.git\ncd dbcreds\n\n# Create virtual environment with uv\nuv venv\nuv pip install -e \".[dev]\"\n\n# Run tests\npytest\n\n# Build documentation\nmkdocs serve\n</code></pre>"},{"location":"includes/features-list/","title":"Features list","text":"<ul> <li>\ud83d\udd10 Secure Storage: Multiple backend support (Windows Credential Manager, macOS Keychain, Linux Secret Service)</li> <li>\ud83c\udf0d Multi-Environment: Manage credentials for development, staging, and production</li> <li>\ud83d\ude80 Rich CLI: Beautiful command-line interface with Rich and Typer</li> <li>\ud83c\udf10 Web UI: Optional FastAPI web interface with HTMX</li> <li>\ud83d\udcca Multi-Database: Support for PostgreSQL, MySQL, Oracle, SQL Server</li> <li>\ud83d\udd04 Password Rotation: Track password age and expiration</li> <li>\ud83d\udcdd Full Documentation: Comprehensive docs with mkdocstrings</li> <li>\ud83c\udfaf Type Safety: Pydantic models for validation</li> </ul>"},{"location":"includes/installation-basic/","title":"Installation basic","text":"<pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n</code></pre>"},{"location":"includes/installation-full/","title":"Installation full","text":"<p>Install directly from GitHub using pip:</p> <pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n</code></pre> <p>Or using uv:</p> <pre><code>uv pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n</code></pre> <p>For development with additional database support:</p> <pre><code># PostgreSQL only (default)\npip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n\n# With MySQL support\npip install \"git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git#egg=dbcreds[mysql]\"\n\n# With all databases\npip install \"git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git#egg=dbcreds[mysql,oracle,mssql]\"\n</code></pre>"},{"location":"includes/installation-tabs/","title":"Installation tabs","text":"pipuvDevelopment <pre><code>pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n</code></pre> <pre><code>uv pip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n</code></pre> <pre><code>git clone https://github.com/Sunnova-ShakesDlamini/dbcreds.git\ncd dbcreds\nuv venv\nuv pip install -e \".[dev]\"\n</code></pre>"},{"location":"includes/key-features/","title":"Key features","text":""},{"location":"includes/key-features/#key-features","title":"\ud83c\udfaf Key Features","text":"<ul> <li>Multi-Environment: Manage dev, staging, and production credentials</li> <li>Secure Storage: Uses your OS's native credential manager</li> <li>Password Rotation: Built-in expiry tracking and notifications</li> <li>Rich CLI: Beautiful terminal interface with auto-completion</li> <li>Type Safety: Full type hints with Pydantic validation</li> <li>Multi-Database: PostgreSQL, MySQL, Oracle, SQL Server support</li> <li>Team Ready: Web UI for secure credential sharing</li> <li>Easy Integration: Works with SQLAlchemy, pandas, and more</li> </ul>"},{"location":"includes/python-examples/","title":"Python examples","text":"<pre><code>from dbcreds import get_engine, get_connection\n\n# Get SQLAlchemy engine\nengine = get_engine(\"dev\")\n\n# Get connection\nwith get_connection(\"prod\") as conn:\n    df = pd.read_sql(\"SELECT * FROM users LIMIT 10\", conn)\n\n# Async support\nfrom dbcreds import get_async_engine\n\nasync_engine = await get_async_engine(\"dev\")\n</code></pre>"},{"location":"includes/quickstart/","title":"Quickstart","text":"<pre><code># Install dbcreds\npip install git+https://github.com/Sunnova-ShakesDlamini/dbcreds.git\n\n# Initialize and add your first environment\ndbcreds init\ndbcreds add dev --type postgresql\n\n# Use in your Python code\nfrom dbcreds import get_engine\nengine = get_engine(\"dev\")\n</code></pre>"},{"location":"security/backends/","title":"Security Backends","text":""},{"location":"security/backends/#backend-security","title":"Backend Security","text":"<p>Each backend provides different security guarantees:</p>"},{"location":"security/backends/#keyring-backend","title":"Keyring Backend","text":"<ul> <li>Uses OS-native credential storage</li> <li>Encrypted at rest</li> <li>User-level isolation</li> </ul>"},{"location":"security/backends/#windows-credential-manager","title":"Windows Credential Manager","text":"<ul> <li>Windows DPAPI encryption</li> <li>Integrated with Windows security</li> </ul>"},{"location":"security/backends/#environment-variables","title":"Environment Variables","text":"<ul> <li>No encryption</li> <li>Suitable for containers</li> <li>Should use secrets management</li> </ul>"},{"location":"security/backends/#backend-interface","title":"Backend Interface","text":"<p>See the Backend API Reference for implementation details.</p>"},{"location":"security/best-practices/","title":"Security Best Practices","text":"<p>This guide covers security best practices for using dbcreds in production environments.</p>"},{"location":"security/best-practices/#credential-storage","title":"Credential Storage","text":""},{"location":"security/best-practices/#use-system-credential-stores","title":"Use System Credential Stores","text":"<p>dbcreds automatically uses the most secure credential storage available:</p> <ul> <li>Windows: Windows Credential Manager</li> <li>macOS: Keychain</li> <li>Linux: Secret Service (libsecret)</li> </ul> <p>Never store credentials in: - Plain text files - Environment variables (except for containers) - Source code - Version control</p>"},{"location":"security/best-practices/#backend-priority","title":"Backend Priority","text":"<p>dbcreds tries backends in this order: 1. Platform-specific secure storage (Windows Credential Manager, Keychain) 2. Cross-platform keyring 3. Environment variables (for containers) 4. Configuration files (metadata only, no passwords)</p>"},{"location":"security/best-practices/#web-interface-security","title":"Web Interface Security","text":""},{"location":"security/best-practices/#authentication","title":"Authentication","text":"<p>The web interface requires authentication. Change the default credentials immediately:</p> <pre><code># dbcreds/web/auth.py\nDEFAULT_USERNAME = \"admin\"  # Change this\nDEFAULT_PASSWORD_HASH = pwd_context.hash(\"your-secure-password\")  # Change this\n</code></pre>"},{"location":"security/best-practices/#https-only","title":"HTTPS Only","text":"<p>Always use HTTPS in production:</p> <pre><code># Use a reverse proxy like nginx\ndbcreds-server --host 127.0.0.1 --port 8001\n\n# nginx configuration\nserver {\n    listen 443 ssl;\n    ssl_certificate /path/to/cert.pem;\n    ssl_certificate_key /path/to/key.pem;\n\n    location / {\n        proxy_pass http://127.0.0.1:8001;\n        proxy_set_header X-Real-IP $remote_addr;\n    }\n}\n</code></pre>"},{"location":"security/best-practices/#security-headers","title":"Security Headers","text":"<p>dbcreds automatically sets security headers: - X-Content-Type-Options: nosniff - X-Frame-Options: DENY - X-XSS-Protection: 1; mode=block - Strict-Transport-Security: max-age=31536000</p>"},{"location":"security/best-practices/#password-management","title":"Password Management","text":""},{"location":"security/best-practices/#regular-rotation","title":"Regular Rotation","text":"<p>Set password expiry policies:</p> <pre><code># Set 30-day expiry\nmanager.set_credentials(\n    \"production\",\n    host=\"db.example.com\",\n    port=5432,\n    database=\"myapp\",\n    username=\"appuser\",\n    password=\"secure-password\",\n    password_expires_days=30  # Expire in 30 days\n)\n</code></pre>"},{"location":"security/best-practices/#strong-passwords","title":"Strong Passwords","text":"<p>Use strong, unique passwords: - Minimum 16 characters - Mix of uppercase, lowercase, numbers, symbols - No dictionary words - No personal information</p> <p>Generate secure passwords:</p> <pre><code>import secrets\nimport string\n\ndef generate_password(length=24):\n    alphabet = string.ascii_letters + string.digits + string.punctuation\n    return ''.join(secrets.choice(alphabet) for _ in range(length))\n</code></pre>"},{"location":"security/best-practices/#access-control","title":"Access Control","text":""},{"location":"security/best-practices/#principle-of-least-privilege","title":"Principle of Least Privilege","text":"<ul> <li>Create separate database users for different applications</li> <li>Grant only necessary permissions</li> <li>Use read-only accounts where possible</li> </ul>"},{"location":"security/best-practices/#environment-isolation","title":"Environment Isolation","text":"<pre><code># Separate credentials for each environment\nmanager.add_environment(\"dev\", DatabaseType.POSTGRESQL)\nmanager.add_environment(\"staging\", DatabaseType.POSTGRESQL)\nmanager.add_environment(\"prod\", DatabaseType.POSTGRESQL, is_production=True)\n</code></pre>"},{"location":"security/best-practices/#network-security","title":"Network Security","text":""},{"location":"security/best-practices/#use-ssltls","title":"Use SSL/TLS","text":"<p>Always encrypt database connections:</p> <pre><code># PostgreSQL with SSL\ncreds.options[\"sslmode\"] = \"require\"\ncreds.options[\"sslcert\"] = \"/path/to/client-cert.pem\"\ncreds.options[\"sslkey\"] = \"/path/to/client-key.pem\"\n\n# MySQL with SSL\ncreds.options[\"ssl_ca\"] = \"/path/to/ca.pem\"\ncreds.options[\"ssl_cert\"] = \"/path/to/client-cert.pem\"\ncreds.options[\"ssl_key\"] = \"/path/to/client-key.pem\"\n</code></pre>"},{"location":"security/best-practices/#ip-whitelisting","title":"IP Whitelisting","text":"<p>Restrict database access by IP: - Use firewall rules - Configure database server access controls - Use VPN for remote access</p>"}]}